{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy.stats as sp\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import minmax_scale, scale, MinMaxScaler\n",
    "\n",
    "from sklearn.datasets import make_classification\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import roc_auc_score, accuracy_score, brier_score_loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from wgan.simulation import create_continuous_data\n",
    "from wgan.imblearn import GANbalancer\n",
    "import wgan.data_loader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.over_sampling import SMOTE, ADASYN, SMOTENC\n",
    "from types import MethodType"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.utils import safe_indexing\n",
    "\n",
    "def create_samples(self, X, y):\n",
    "        # FIXME: uncomment in version 0.6\n",
    "        # self._validate_estimator()\n",
    "\n",
    "        for class_sample, n_samples in self.sampling_strategy_.items():\n",
    "            if n_samples == 0:\n",
    "                continue\n",
    "            target_class_indices = np.flatnonzero(y == class_sample)\n",
    "            X_class = safe_indexing(X, target_class_indices)\n",
    "\n",
    "            self.nn_k_.fit(X_class)\n",
    "            nns = self.nn_k_.kneighbors(X_class, return_distance=False)[:, 1:]\n",
    "            X_new, y_new = self._make_samples(X_class, y.dtype, class_sample,\n",
    "                                              X_class, nns, n_samples, 1.0)\n",
    "\n",
    "        return X_new, y_new\n",
    "\n",
    "\n",
    "SMOTE._sample_only = create_samples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Artifical Data Generation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "N_SAMPLES = 10000\n",
    "N_VAR = 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "mixture_multinormal = create_continuous_data(n_samples=N_SAMPLES, n_var=N_VAR, n_dependent=N_VAR, pos_ratio=0, \n",
    "                                         n_cluster=2, \n",
    "                                         mean = [[[0,2],[0,2]], [[0,0],[0,0]]], \n",
    "                                         cov = [[np.array([[1,-0.9],[-0.9,1]]), None], [np.array([[1,0.8],[0.8,1]]), None]], \n",
    "                                         random_state=123)\n",
    "\n",
    "mixture_gaussian = create_continuous_data(n_samples=N_SAMPLES, n_var=N_VAR, n_dependent=N_VAR, pos_ratio=0, \n",
    "                                         n_cluster=2, \n",
    "                                         mean = [[[4,1],[4,1]], [[-1,-4],[-1,-4]]], \n",
    "                                         cov = [[np.array([[1,0],[0,1]]), None], [np.array([[2,0],[0,2]]), None]], \n",
    "                                         random_state=123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = {\n",
    "    \"Independent\" : create_continuous_data(n_samples=N_SAMPLES, n_var=N_VAR, n_dependent=0, pos_ratio=0, \n",
    "                                           n_cluster=2, random_state=123),\n",
    "    \"Dependent\" : create_continuous_data(n_samples=N_SAMPLES, n_var=N_VAR, n_dependent=N_VAR, pos_ratio=0, \n",
    "                                         n_cluster=2, \n",
    "                                         mean = [[[0,2],[0,2]], [[0,0],[0,0]]], \n",
    "                                         cov = [[np.array([[1,-0.9],[-0.9,1]]), None], [np.array([[1,0.8],[0.8,1]]), None]], \n",
    "                                         random_state=123),\n",
    "    #\"Mixed\" : create_continuous_data(n_samples=N_SAMPLES, n_var=N_VAR, n_dependent=N_VAR//2, pos_ratio=0)\n",
    "}\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "data[\"Dependent\"] = mixture_gaussian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "gan_balancer = GANbalancer(idx_cont=range(N_VAR), categorical=None, auxiliary=False,\n",
    "                           gan_architecture = \"fisher\",\n",
    "                           generator_input=N_VAR*2, generator_layers=[50], \n",
    "                           critic_layers=[50, 50], critic_iterations=3,\n",
    "                           layer_norm=True,\n",
    "                           learning_rate = [5e-5, 5e-5],\n",
    "                           batch_size = 64, n_iter=20000, \n",
    "                           sampling_strategy = {0:N_SAMPLES, 1:0}, \n",
    "                           verbose=2, training_gif=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "smote = SMOTE(sampling_strategy = {0:N_SAMPLES, 1:0})\n",
    "smote._validate_estimator()\n",
    "smote.sampling_strategy_ = {0:N_SAMPLES, 1:0}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_first_moments(X):\n",
    "    return np.vstack([x.mean(axis=0) for x in X])\n",
    "\n",
    "def check_second_moments(X):\n",
    "    return [np.cov(x, rowvar=False).round(2) for x in X]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Univariate Normal RVs - First and Second Moment Approximation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gan_balancer._fit(data[\"Independent\"][0], y=np.zeros(shape=N_SAMPLES))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gan_balancer.trainer.save_training_gif(\"/Users/hauptjoh/Downloads/training_gif_test.gif\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gan_balancer.trainer.print_every = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gan_balancer._update(data[\"Independent\"][0], y=np.zeros(shape=N_SAMPLES), \n",
    "                     n_iter=10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = gan_balancer.trainer.plot_training()\n",
    "fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "check_first_moments([data[\"Independent\"][0], \n",
    "                     gan_balancer.generator.sample_data(N_SAMPLES),\n",
    "                     smote._sample(data[\"Independent\"][0], y=np.zeros(shape=N_SAMPLES))[0]\n",
    "                    ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "check_second_moments([data[\"Independent\"][0], \n",
    "                     gan_balancer.generator.sample_data(N_SAMPLES),\n",
    "                     smote._sample(data[\"Independent\"][0], y=np.zeros(shape=N_SAMPLES))[0]\n",
    "                    ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Multivariate Normal RVs - Covariance Approximation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_idx = \"Dependent\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  0%|          | 0/20000 [00:00<?, ?it/s]\u001b[A\n",
      "  0%|          | 12/20000 [00:01<31:17, 10.65it/s]\u001b[A\n",
      "  0%|          | 64/20000 [00:02<24:12, 13.72it/s]\u001b[A\n",
      "  1%|          | 117/20000 [00:03<19:06, 17.34it/s]\u001b[A\n",
      "  1%|          | 169/20000 [00:04<15:52, 20.82it/s]\u001b[A\n",
      "  1%|          | 221/20000 [00:06<13:32, 24.35it/s]\u001b[A\n",
      "  1%|          | 169/20000 [00:20<14:31, 22.75it/s]\n",
      "  2%|▏         | 326/20000 [00:08<10:49, 30.30it/s]\u001b[A\n",
      "  2%|▏         | 378/20000 [00:10<10:08, 32.23it/s]\u001b[A\n",
      "  2%|▏         | 431/20000 [00:11<09:33, 34.10it/s]\u001b[A\n",
      "  2%|▏         | 483/20000 [00:12<09:00, 36.10it/s]\u001b[A\n",
      "  3%|▎         | 535/20000 [00:13<08:29, 38.17it/s]\u001b[A\n",
      "  3%|▎         | 588/20000 [00:15<08:19, 38.86it/s]\u001b[A\n",
      "  3%|▎         | 640/20000 [00:16<08:18, 38.80it/s]\u001b[A\n",
      "  3%|▎         | 692/20000 [00:17<08:16, 38.85it/s]\u001b[A\n",
      "  4%|▎         | 745/20000 [00:19<08:42, 36.88it/s]\u001b[A\n",
      "  4%|▍         | 797/20000 [00:20<08:25, 37.98it/s]\u001b[A\n",
      "  4%|▍         | 849/20000 [00:22<08:08, 39.21it/s]\u001b[A\n",
      "  5%|▍         | 902/20000 [00:23<07:56, 40.09it/s]\u001b[A\n",
      "  5%|▍         | 954/20000 [00:24<08:12, 38.65it/s]\u001b[A\n",
      "  5%|▌         | 1006/20000 [00:26<08:22, 37.78it/s]\u001b[A\n",
      "  5%|▌         | 1059/20000 [00:27<08:10, 38.63it/s]\u001b[A\n",
      "  6%|▌         | 1111/20000 [00:28<08:00, 39.29it/s]\u001b[A\n",
      "  6%|▌         | 1163/20000 [00:30<07:51, 39.91it/s]\u001b[A\n",
      "  6%|▌         | 1216/20000 [00:31<07:50, 39.91it/s]\u001b[A\n",
      "  6%|▋         | 1268/20000 [00:32<07:43, 40.39it/s]\u001b[A\n",
      "  7%|▋         | 1320/20000 [00:33<07:39, 40.65it/s]\u001b[A\n",
      "  7%|▋         | 1373/20000 [00:35<07:34, 41.02it/s]\u001b[A\n",
      "  7%|▋         | 1425/20000 [00:36<07:31, 41.15it/s]\u001b[A\n",
      "  7%|▋         | 1477/20000 [00:37<07:24, 41.70it/s]\u001b[A\n",
      "  8%|▊         | 1530/20000 [00:38<07:21, 41.81it/s]\u001b[A\n",
      "  8%|▊         | 1582/20000 [00:40<07:14, 42.35it/s]\u001b[A\n",
      "  8%|▊         | 1634/20000 [00:41<07:16, 42.04it/s]\u001b[A\n",
      "  8%|▊         | 1687/20000 [00:42<07:23, 41.29it/s]\u001b[A\n",
      "  9%|▊         | 1739/20000 [00:44<08:36, 35.38it/s]\u001b[A\n",
      "  9%|▉         | 1791/20000 [00:46<08:39, 35.03it/s]\u001b[A\n",
      "  9%|▉         | 1844/20000 [00:47<09:12, 32.85it/s]\u001b[A\n",
      "  9%|▉         | 1896/20000 [00:49<08:58, 33.62it/s]\u001b[A\n",
      " 10%|▉         | 1948/20000 [00:50<08:42, 34.53it/s]\u001b[A\n",
      " 10%|█         | 2001/20000 [00:52<08:08, 36.81it/s]\u001b[A\n",
      " 10%|█         | 2053/20000 [00:53<07:50, 38.11it/s]\u001b[A\n",
      " 11%|█         | 2105/20000 [00:54<07:34, 39.35it/s]\u001b[A\n",
      " 11%|█         | 2158/20000 [00:55<07:24, 40.12it/s]\u001b[A\n",
      " 11%|█         | 2210/20000 [00:57<07:25, 39.89it/s]\u001b[A\n",
      " 11%|█▏        | 2262/20000 [00:58<07:16, 40.61it/s]\u001b[A\n",
      " 12%|█▏        | 2315/20000 [00:59<07:14, 40.69it/s]\u001b[A\n",
      " 12%|█▏        | 2367/20000 [01:01<07:48, 37.62it/s]\u001b[A\n",
      " 12%|█▏        | 2419/20000 [01:03<08:41, 33.73it/s]\u001b[A\n",
      " 12%|█▏        | 2472/20000 [01:04<08:08, 35.89it/s]\u001b[A\n",
      " 13%|█▎        | 2524/20000 [01:05<07:48, 37.29it/s]\u001b[A\n",
      " 13%|█▎        | 2576/20000 [01:07<07:39, 37.91it/s]\u001b[A\n",
      " 13%|█▎        | 2629/20000 [01:08<07:23, 39.15it/s]\u001b[A\n",
      " 13%|█▎        | 2681/20000 [01:09<07:17, 39.60it/s]\u001b[A\n",
      " 14%|█▎        | 2733/20000 [01:10<07:14, 39.70it/s]\u001b[A\n",
      " 14%|█▍        | 2786/20000 [01:12<07:10, 39.95it/s]\u001b[A\n",
      " 14%|█▍        | 2838/20000 [01:13<07:02, 40.65it/s]\u001b[A\n",
      " 14%|█▍        | 2890/20000 [01:14<07:02, 40.46it/s]\u001b[A\n",
      " 15%|█▍        | 2943/20000 [01:15<07:01, 40.42it/s]\u001b[A\n",
      " 15%|█▍        | 2995/20000 [01:17<07:16, 38.92it/s]\u001b[A\n",
      " 15%|█▌        | 3047/20000 [01:18<07:12, 39.24it/s]\u001b[A\n",
      " 16%|█▌        | 3100/20000 [01:19<06:57, 40.46it/s]\u001b[A\n",
      " 16%|█▌        | 3152/20000 [01:21<06:51, 40.91it/s]\u001b[A\n",
      " 16%|█▌        | 3204/20000 [01:22<06:46, 41.36it/s]\u001b[A\n",
      " 16%|█▋        | 3257/20000 [01:23<06:39, 41.95it/s]\u001b[A\n",
      " 17%|█▋        | 3309/20000 [01:24<06:44, 41.30it/s]\u001b[A\n",
      " 17%|█▋        | 3361/20000 [01:26<07:15, 38.22it/s]\u001b[A\n",
      " 17%|█▋        | 3414/20000 [01:29<09:08, 30.23it/s]\u001b[A\n",
      " 17%|█▋        | 3466/20000 [01:30<09:06, 30.25it/s]\u001b[A\n",
      " 18%|█▊        | 3518/20000 [01:32<09:39, 28.45it/s]\u001b[A\n",
      " 18%|█▊        | 3571/20000 [01:35<10:02, 27.26it/s]\u001b[A\n",
      " 18%|█▊        | 3623/20000 [01:37<10:36, 25.74it/s]\u001b[A\n",
      " 18%|█▊        | 3675/20000 [01:38<09:42, 28.02it/s]\u001b[A\n",
      " 19%|█▊        | 3728/20000 [01:40<08:57, 30.30it/s]\u001b[A\n",
      " 19%|█▉        | 3780/20000 [01:41<08:35, 31.44it/s]\u001b[A\n",
      " 19%|█▉        | 3832/20000 [01:42<07:53, 34.15it/s]\u001b[A\n",
      " 19%|█▉        | 3885/20000 [01:44<07:20, 36.62it/s]\u001b[A\n",
      " 20%|█▉        | 3937/20000 [01:45<07:01, 38.09it/s]\u001b[A\n",
      " 20%|█▉        | 3989/20000 [01:46<06:51, 38.90it/s]\u001b[A\n",
      " 20%|██        | 4042/20000 [01:48<07:21, 36.15it/s]\u001b[A\n",
      " 20%|██        | 4094/20000 [01:50<08:24, 31.54it/s]\u001b[A\n",
      " 21%|██        | 4146/20000 [01:52<08:09, 32.41it/s]\u001b[A\n",
      " 21%|██        | 4199/20000 [01:53<07:34, 34.78it/s]\u001b[A\n",
      " 21%|██▏       | 4251/20000 [01:54<07:05, 36.99it/s]\u001b[A\n",
      " 22%|██▏       | 4303/20000 [01:55<06:50, 38.28it/s]\u001b[A\n",
      " 22%|██▏       | 4356/20000 [01:57<06:38, 39.27it/s]\u001b[A\n",
      " 22%|██▏       | 4408/20000 [01:58<06:30, 39.91it/s]\u001b[A\n",
      " 22%|██▏       | 4460/20000 [01:59<06:21, 40.77it/s]\u001b[A\n",
      " 23%|██▎       | 4513/20000 [02:00<06:15, 41.25it/s]\u001b[A\n",
      " 23%|██▎       | 4565/20000 [02:01<06:09, 41.72it/s]\u001b[A\n",
      " 23%|██▎       | 4617/20000 [02:03<06:23, 40.12it/s]\u001b[A\n",
      " 23%|██▎       | 4670/20000 [02:04<06:18, 40.49it/s]\u001b[A\n",
      " 24%|██▎       | 4722/20000 [02:06<06:24, 39.77it/s]\u001b[A\n",
      " 24%|██▍       | 4774/20000 [02:07<06:26, 39.44it/s]\u001b[A\n",
      " 24%|██▍       | 4827/20000 [02:08<06:22, 39.62it/s]\u001b[A\n",
      " 24%|██▍       | 4879/20000 [02:10<06:23, 39.40it/s]\u001b[A\n",
      " 25%|██▍       | 4931/20000 [02:11<06:34, 38.19it/s]\u001b[A\n",
      " 25%|██▍       | 4984/20000 [02:13<06:46, 36.98it/s]\u001b[A\n",
      " 25%|██▌       | 5036/20000 [02:15<07:38, 32.61it/s]\u001b[A\n",
      " 25%|██▌       | 5088/20000 [02:17<08:27, 29.38it/s]\u001b[A\n",
      " 26%|██▌       | 5141/20000 [02:19<08:47, 28.15it/s]\u001b[A\n",
      " 26%|██▌       | 5193/20000 [02:21<09:07, 27.04it/s]\u001b[A\n",
      " 26%|██▌       | 5245/20000 [02:23<08:41, 28.30it/s]\u001b[A\n",
      " 26%|██▋       | 5298/20000 [02:24<08:27, 28.97it/s]\u001b[A\n",
      " 27%|██▋       | 5350/20000 [02:26<07:43, 31.63it/s]\u001b[A\n",
      " 27%|██▋       | 5402/20000 [02:27<07:14, 33.61it/s]\u001b[A\n",
      " 27%|██▋       | 5455/20000 [02:28<06:46, 35.80it/s]\u001b[A\n",
      " 28%|██▊       | 5507/20000 [02:29<06:26, 37.54it/s]\u001b[A\n",
      " 28%|██▊       | 5559/20000 [02:32<07:40, 31.38it/s]\u001b[A\n",
      " 28%|██▊       | 5612/20000 [02:33<07:23, 32.41it/s]\u001b[A\n",
      " 28%|██▊       | 5664/20000 [02:35<07:20, 32.57it/s]\u001b[A\n",
      " 29%|██▊       | 5716/20000 [02:36<06:57, 34.21it/s]\u001b[A\n",
      " 29%|██▉       | 5769/20000 [02:37<06:36, 35.88it/s]\u001b[A\n",
      " 29%|██▉       | 5821/20000 [02:39<06:30, 36.34it/s]\u001b[A\n",
      " 29%|██▉       | 5873/20000 [02:40<06:13, 37.86it/s]\u001b[A\n",
      " 30%|██▉       | 5926/20000 [02:41<05:56, 39.43it/s]\u001b[A\n",
      " 30%|██▉       | 5978/20000 [02:43<05:59, 38.96it/s]\u001b[A\n",
      " 30%|███       | 6030/20000 [02:44<06:24, 36.30it/s]\u001b[A\n",
      " 30%|███       | 6083/20000 [02:46<06:52, 33.77it/s]\u001b[A\n",
      " 31%|███       | 6135/20000 [02:48<06:55, 33.33it/s]\u001b[A\n",
      " 31%|███       | 6187/20000 [02:49<06:52, 33.48it/s]\u001b[A\n",
      " 31%|███       | 6240/20000 [02:51<06:49, 33.57it/s]\u001b[A\n",
      " 31%|███▏      | 6292/20000 [02:52<06:39, 34.30it/s]\u001b[A\n",
      " 32%|███▏      | 6344/20000 [02:53<06:10, 36.82it/s]\u001b[A\n",
      " 32%|███▏      | 6397/20000 [02:55<05:51, 38.68it/s]\u001b[A\n",
      " 32%|███▏      | 6449/20000 [02:56<05:55, 38.09it/s]\u001b[A\n",
      " 33%|███▎      | 6501/20000 [02:57<05:45, 39.05it/s]\u001b[A\n",
      " 33%|███▎      | 6554/20000 [02:59<05:44, 39.07it/s]\u001b[A\n",
      " 33%|███▎      | 6606/20000 [03:00<05:40, 39.39it/s]\u001b[A\n",
      " 33%|███▎      | 6658/20000 [03:01<05:50, 38.03it/s]\u001b[A\n",
      " 34%|███▎      | 6711/20000 [03:03<05:46, 38.40it/s]\u001b[A\n",
      " 34%|███▍      | 6763/20000 [03:04<05:50, 37.77it/s]\u001b[A\n",
      " 34%|███▍      | 6815/20000 [03:06<06:14, 35.21it/s]\u001b[A\n",
      " 34%|███▍      | 6868/20000 [03:08<06:38, 32.91it/s]\u001b[A\n",
      " 35%|███▍      | 6920/20000 [03:09<06:19, 34.43it/s]\u001b[A\n",
      " 35%|███▍      | 6972/20000 [03:10<06:01, 36.09it/s]\u001b[A\n",
      " 35%|███▌      | 7025/20000 [03:12<05:49, 37.16it/s]\u001b[A\n",
      " 35%|███▌      | 7077/20000 [03:13<05:35, 38.55it/s]\u001b[A\n",
      " 36%|███▌      | 7129/20000 [03:14<05:32, 38.76it/s]\u001b[A\n",
      " 36%|███▌      | 7182/20000 [03:16<05:21, 39.87it/s]\u001b[A\n",
      " 36%|███▌      | 7234/20000 [03:17<05:17, 40.23it/s]\u001b[A\n",
      " 36%|███▋      | 7286/20000 [03:18<05:16, 40.21it/s]\u001b[A\n",
      " 37%|███▋      | 7339/20000 [03:19<05:07, 41.14it/s]\u001b[A\n",
      " 37%|███▋      | 7391/20000 [03:21<05:11, 40.43it/s]\u001b[A\n",
      " 37%|███▋      | 7443/20000 [03:22<05:04, 41.17it/s]\u001b[A\n",
      " 37%|███▋      | 7496/20000 [03:23<04:58, 41.83it/s]\u001b[A\n",
      " 38%|███▊      | 7548/20000 [03:24<04:56, 42.01it/s]\u001b[A\n",
      " 38%|███▊      | 7600/20000 [03:26<05:00, 41.21it/s]\u001b[A\n",
      " 38%|███▊      | 7653/20000 [03:27<04:57, 41.45it/s]\u001b[A\n",
      " 39%|███▊      | 7705/20000 [03:28<04:52, 41.99it/s]\u001b[A\n",
      " 39%|███▉      | 7757/20000 [03:29<04:47, 42.58it/s]\u001b[A\n",
      " 39%|███▉      | 7810/20000 [03:30<04:45, 42.74it/s]\u001b[A\n",
      " 39%|███▉      | 7862/20000 [03:32<04:43, 42.86it/s]\u001b[A\n",
      " 40%|███▉      | 7914/20000 [03:33<04:43, 42.59it/s]\u001b[A\n",
      " 40%|███▉      | 7967/20000 [03:34<04:38, 43.21it/s]\u001b[A\n",
      " 40%|████      | 8019/20000 [03:35<04:37, 43.10it/s]\u001b[A\n",
      " 40%|████      | 8071/20000 [03:37<04:39, 42.72it/s]\u001b[A\n",
      " 41%|████      | 8124/20000 [03:38<04:35, 43.08it/s]\u001b[A\n",
      " 41%|████      | 8176/20000 [03:39<04:32, 43.32it/s]\u001b[A\n",
      " 41%|████      | 8228/20000 [03:40<04:33, 43.08it/s]\u001b[A\n",
      " 41%|████▏     | 8281/20000 [03:41<04:29, 43.50it/s]\u001b[A\n",
      " 42%|████▏     | 8333/20000 [03:43<04:27, 43.59it/s]\u001b[A\n",
      " 42%|████▏     | 8385/20000 [03:44<04:26, 43.54it/s]\u001b[A\n",
      " 42%|████▏     | 8438/20000 [03:45<04:27, 43.14it/s]\u001b[A\n",
      " 42%|████▏     | 8490/20000 [03:46<04:31, 42.46it/s]\u001b[A\n",
      " 43%|████▎     | 8542/20000 [03:48<04:55, 38.80it/s]\u001b[A\n",
      " 43%|████▎     | 8595/20000 [03:49<04:53, 38.91it/s]\u001b[A\n",
      " 43%|████▎     | 8647/20000 [03:51<04:58, 38.01it/s]\u001b[A\n",
      " 43%|████▎     | 8699/20000 [03:52<05:10, 36.43it/s]\u001b[A\n",
      " 44%|████▍     | 8752/20000 [03:54<04:59, 37.55it/s]\u001b[A\n",
      " 44%|████▍     | 8804/20000 [03:55<04:51, 38.38it/s]\u001b[A\n",
      " 44%|████▍     | 8856/20000 [03:56<04:43, 39.37it/s]\u001b[A\n",
      " 45%|████▍     | 8909/20000 [03:57<04:33, 40.53it/s]\u001b[A\n",
      " 45%|████▍     | 8961/20000 [03:58<04:27, 41.29it/s]\u001b[A\n",
      " 45%|████▌     | 9013/20000 [04:00<04:21, 42.01it/s]\u001b[A\n",
      " 45%|████▌     | 9066/20000 [04:01<04:19, 42.14it/s]\u001b[A\n",
      " 46%|████▌     | 9118/20000 [04:02<04:17, 42.23it/s]\u001b[A\n",
      " 46%|████▌     | 9170/20000 [04:04<04:31, 39.87it/s]\u001b[A\n",
      " 46%|████▌     | 9223/20000 [04:05<04:23, 40.96it/s]\u001b[A\n",
      " 46%|████▋     | 9275/20000 [04:06<04:17, 41.64it/s]\u001b[A\n",
      " 47%|████▋     | 9327/20000 [04:07<04:14, 41.99it/s]\u001b[A\n",
      " 47%|████▋     | 9380/20000 [04:08<04:09, 42.49it/s]\u001b[A\n",
      " 47%|████▋     | 9432/20000 [04:10<04:06, 42.87it/s]\u001b[A\n",
      " 47%|████▋     | 9484/20000 [04:11<04:07, 42.55it/s]\u001b[A\n",
      " 48%|████▊     | 9537/20000 [04:12<04:04, 42.83it/s]\u001b[A\n",
      " 48%|████▊     | 9589/20000 [04:13<04:01, 43.18it/s]\u001b[A\n",
      " 48%|████▊     | 9641/20000 [04:15<04:00, 43.10it/s]\u001b[A\n",
      " 48%|████▊     | 9694/20000 [04:16<03:57, 43.33it/s]\u001b[A\n",
      " 49%|████▊     | 9746/20000 [04:17<03:57, 43.09it/s]\u001b[A\n",
      " 49%|████▉     | 9798/20000 [04:18<03:56, 43.09it/s]\u001b[A\n",
      " 49%|████▉     | 9851/20000 [04:19<03:55, 43.17it/s]\u001b[A\n",
      " 50%|████▉     | 9903/20000 [04:21<03:53, 43.29it/s]\u001b[A\n",
      " 50%|████▉     | 9955/20000 [04:22<03:52, 43.28it/s]\u001b[A\n",
      " 50%|█████     | 10008/20000 [04:23<03:49, 43.51it/s]\u001b[A\n",
      " 50%|█████     | 10060/20000 [04:24<03:53, 42.65it/s]\u001b[A\n",
      " 51%|█████     | 10112/20000 [04:26<04:14, 38.90it/s]\u001b[A\n",
      " 51%|█████     | 10165/20000 [04:27<04:18, 38.00it/s]\u001b[A\n",
      " 51%|█████     | 10217/20000 [04:29<04:53, 33.38it/s]\u001b[A\n",
      " 51%|█████▏    | 10269/20000 [04:31<05:25, 29.90it/s]\u001b[A\n",
      " 52%|█████▏    | 10322/20000 [04:33<05:34, 28.96it/s]\u001b[A\n",
      " 52%|█████▏    | 10374/20000 [04:35<05:00, 32.05it/s]\u001b[A\n",
      " 52%|█████▏    | 10426/20000 [04:36<04:37, 34.56it/s]\u001b[A\n",
      " 52%|█████▏    | 10479/20000 [04:37<04:17, 36.99it/s]\u001b[A\n",
      " 53%|█████▎    | 10531/20000 [04:38<04:05, 38.54it/s]\u001b[A\n",
      " 53%|█████▎    | 10583/20000 [04:39<03:54, 40.18it/s]\u001b[A\n",
      " 53%|█████▎    | 10636/20000 [04:41<03:49, 40.72it/s]\u001b[A\n",
      " 53%|█████▎    | 10688/20000 [04:42<03:44, 41.43it/s]\u001b[A\n",
      " 54%|█████▎    | 10740/20000 [04:43<03:41, 41.82it/s]\u001b[A\n",
      " 54%|█████▍    | 10793/20000 [04:44<03:37, 42.25it/s]\u001b[A\n",
      " 54%|█████▍    | 10845/20000 [04:46<03:35, 42.48it/s]\u001b[A\n",
      " 54%|█████▍    | 10897/20000 [04:47<03:34, 42.43it/s]\u001b[A\n",
      " 55%|█████▍    | 10950/20000 [04:48<03:30, 42.90it/s]\u001b[A\n",
      " 55%|█████▌    | 11002/20000 [04:49<03:28, 43.22it/s]\u001b[A\n",
      " 55%|█████▌    | 11054/20000 [04:51<03:39, 40.74it/s]\u001b[A\n",
      " 56%|█████▌    | 11107/20000 [04:52<03:43, 39.74it/s]\u001b[A\n",
      " 56%|█████▌    | 11159/20000 [04:54<03:53, 37.78it/s]\u001b[A\n",
      " 56%|█████▌    | 11211/20000 [04:55<03:51, 37.96it/s]\u001b[A\n",
      " 56%|█████▋    | 11264/20000 [04:56<03:44, 38.92it/s]\u001b[A\n",
      " 57%|█████▋    | 11316/20000 [04:57<03:35, 40.22it/s]\u001b[A\n",
      " 57%|█████▋    | 11368/20000 [04:59<03:30, 41.10it/s]\u001b[A\n",
      " 57%|█████▋    | 11421/20000 [05:00<03:25, 41.84it/s]\u001b[A\n",
      " 57%|█████▋    | 11473/20000 [05:01<03:22, 42.08it/s]\u001b[A\n",
      " 58%|█████▊    | 11525/20000 [05:02<03:22, 41.93it/s]\u001b[A\n",
      " 58%|█████▊    | 11578/20000 [05:04<03:19, 42.30it/s]\u001b[A\n",
      " 58%|█████▊    | 11630/20000 [05:05<03:18, 42.11it/s]\u001b[A\n",
      " 58%|█████▊    | 11682/20000 [05:06<03:17, 42.05it/s]\u001b[A\n",
      " 59%|█████▊    | 11735/20000 [05:07<03:15, 42.38it/s]\u001b[A\n",
      " 59%|█████▉    | 11787/20000 [05:08<03:12, 42.61it/s]\u001b[A\n",
      " 59%|█████▉    | 11839/20000 [05:10<03:09, 43.03it/s]\u001b[A\n",
      " 59%|█████▉    | 11892/20000 [05:11<03:09, 42.83it/s]\u001b[A\n",
      " 60%|█████▉    | 11944/20000 [05:12<03:08, 42.83it/s]\u001b[A\n",
      " 60%|█████▉    | 11996/20000 [05:13<03:06, 42.98it/s]\u001b[A\n",
      " 60%|██████    | 12049/20000 [05:15<03:04, 43.05it/s]\u001b[A\n",
      " 61%|██████    | 12101/20000 [05:16<03:27, 38.05it/s]\u001b[A\n",
      " 61%|██████    | 12153/20000 [05:18<03:58, 32.87it/s]\u001b[A\n",
      " 61%|██████    | 12206/20000 [05:21<04:35, 28.34it/s]\u001b[A\n",
      " 61%|██████▏   | 12258/20000 [05:23<04:42, 27.37it/s]\u001b[A\n",
      " 62%|██████▏   | 12310/20000 [05:24<04:10, 30.67it/s]\u001b[A\n",
      " 62%|██████▏   | 12363/20000 [05:26<04:05, 31.16it/s]\u001b[A\n",
      " 62%|██████▏   | 12415/20000 [05:27<03:44, 33.77it/s]\u001b[A\n",
      " 62%|██████▏   | 12467/20000 [05:28<03:28, 36.05it/s]\u001b[A\n",
      " 63%|██████▎   | 12520/20000 [05:29<03:16, 38.09it/s]\u001b[A\n",
      " 63%|██████▎   | 12572/20000 [05:31<03:09, 39.23it/s]\u001b[A\n",
      " 63%|██████▎   | 12624/20000 [05:32<03:03, 40.30it/s]\u001b[A\n",
      " 63%|██████▎   | 12677/20000 [05:33<02:57, 41.21it/s]\u001b[A\n",
      " 64%|██████▎   | 12729/20000 [05:34<02:54, 41.67it/s]\u001b[A\n",
      " 64%|██████▍   | 12781/20000 [05:36<02:52, 41.84it/s]\u001b[A\n",
      " 64%|██████▍   | 12834/20000 [05:37<02:50, 42.03it/s]\u001b[A\n",
      " 64%|██████▍   | 12886/20000 [05:38<02:47, 42.37it/s]\u001b[A\n",
      " 65%|██████▍   | 12938/20000 [05:39<02:45, 42.62it/s]\u001b[A\n",
      " 65%|██████▍   | 12991/20000 [05:40<02:44, 42.69it/s]\u001b[A\n",
      " 65%|██████▌   | 13043/20000 [05:42<02:42, 42.74it/s]\u001b[A\n",
      " 65%|██████▌   | 13095/20000 [05:43<02:40, 43.02it/s]\u001b[A\n",
      " 66%|██████▌   | 13148/20000 [05:44<02:39, 42.96it/s]\u001b[A\n",
      " 66%|██████▌   | 13200/20000 [05:45<02:47, 40.52it/s]\u001b[A\n",
      " 66%|██████▋   | 13252/20000 [05:47<02:45, 40.80it/s]\u001b[A\n",
      " 67%|██████▋   | 13305/20000 [05:48<02:41, 41.56it/s]\u001b[A\n",
      " 67%|██████▋   | 13357/20000 [05:49<02:38, 41.84it/s]\u001b[A\n",
      " 67%|██████▋   | 13409/20000 [05:50<02:36, 41.98it/s]\u001b[A\n",
      " 67%|██████▋   | 13462/20000 [05:52<02:41, 40.43it/s]\u001b[A\n",
      " 68%|██████▊   | 13514/20000 [05:53<02:44, 39.38it/s]\u001b[A\n",
      " 68%|██████▊   | 13566/20000 [05:55<02:46, 38.62it/s]\u001b[A\n",
      " 68%|██████▊   | 13619/20000 [05:56<02:39, 39.94it/s]\u001b[A\n",
      " 68%|██████▊   | 13671/20000 [05:57<02:35, 40.66it/s]\u001b[A\n",
      " 69%|██████▊   | 13723/20000 [05:58<02:32, 41.08it/s]\u001b[A\n",
      " 69%|██████▉   | 13776/20000 [06:00<02:27, 42.13it/s]\u001b[A\n",
      " 69%|██████▉   | 13828/20000 [06:01<02:31, 40.76it/s]\u001b[A\n",
      " 69%|██████▉   | 13880/20000 [06:02<02:35, 39.44it/s]\u001b[A\n",
      " 70%|██████▉   | 13933/20000 [06:03<02:27, 41.14it/s]\u001b[A\n",
      " 70%|██████▉   | 13985/20000 [06:05<02:25, 41.36it/s]\u001b[A\n",
      " 70%|███████   | 14037/20000 [06:06<02:21, 42.04it/s]\u001b[A\n",
      " 70%|███████   | 14090/20000 [06:07<02:18, 42.75it/s]\u001b[A\n",
      " 71%|███████   | 14142/20000 [06:08<02:17, 42.58it/s]\u001b[A\n",
      " 71%|███████   | 14194/20000 [06:10<02:16, 42.41it/s]\u001b[A\n",
      " 71%|███████   | 14247/20000 [06:11<02:15, 42.55it/s]\u001b[A\n",
      " 71%|███████▏  | 14299/20000 [06:12<02:13, 42.65it/s]\u001b[A\n",
      " 72%|███████▏  | 14351/20000 [06:13<02:11, 42.81it/s]\u001b[A\n",
      " 72%|███████▏  | 14404/20000 [06:14<02:10, 42.96it/s]\u001b[A\n",
      " 72%|███████▏  | 14456/20000 [06:16<02:10, 42.57it/s]\u001b[A\n",
      " 73%|███████▎  | 14508/20000 [06:17<02:08, 42.67it/s]\u001b[A\n",
      " 73%|███████▎  | 14561/20000 [06:18<02:06, 42.90it/s]\u001b[A\n",
      " 73%|███████▎  | 14613/20000 [06:19<02:04, 43.14it/s]\u001b[A\n",
      " 73%|███████▎  | 14665/20000 [06:21<02:04, 42.98it/s]\u001b[A\n",
      " 74%|███████▎  | 14718/20000 [06:22<02:01, 43.33it/s]\u001b[A\n",
      " 74%|███████▍  | 14770/20000 [06:23<02:00, 43.31it/s]\u001b[A\n",
      " 74%|███████▍  | 14822/20000 [06:24<01:59, 43.23it/s]\u001b[A\n",
      " 74%|███████▍  | 14875/20000 [06:25<01:58, 43.32it/s]\u001b[A\n",
      " 75%|███████▍  | 14927/20000 [06:27<01:58, 42.87it/s]\u001b[A\n",
      " 75%|███████▍  | 14979/20000 [06:28<01:56, 43.19it/s]\u001b[A\n",
      " 75%|███████▌  | 15032/20000 [06:29<01:55, 43.06it/s]\u001b[A\n",
      " 75%|███████▌  | 15084/20000 [06:30<01:54, 42.99it/s]\u001b[A\n",
      " 76%|███████▌  | 15136/20000 [06:31<01:53, 42.86it/s]\u001b[A\n",
      " 76%|███████▌  | 15189/20000 [06:33<01:52, 42.59it/s]\u001b[A\n",
      " 76%|███████▌  | 15241/20000 [06:34<01:51, 42.75it/s]\u001b[A\n",
      " 76%|███████▋  | 15293/20000 [06:35<01:49, 42.81it/s]\u001b[A\n",
      " 77%|███████▋  | 15346/20000 [06:36<01:48, 43.08it/s]\u001b[A\n",
      " 77%|███████▋  | 15398/20000 [06:38<01:46, 43.09it/s]\u001b[A\n",
      " 77%|███████▋  | 15450/20000 [06:39<01:45, 42.95it/s]\u001b[A\n",
      " 78%|███████▊  | 15503/20000 [06:40<01:44, 42.89it/s]\u001b[A\n",
      " 78%|███████▊  | 15555/20000 [06:41<01:44, 42.73it/s]\u001b[A\n",
      " 78%|███████▊  | 15607/20000 [06:42<01:43, 42.62it/s]\u001b[A\n",
      " 78%|███████▊  | 15660/20000 [06:44<01:41, 42.63it/s]\u001b[A\n",
      " 79%|███████▊  | 15712/20000 [06:45<01:40, 42.72it/s]\u001b[A\n",
      " 79%|███████▉  | 15764/20000 [06:46<01:39, 42.73it/s]\u001b[A\n",
      " 79%|███████▉  | 15817/20000 [06:47<01:37, 43.09it/s]\u001b[A\n",
      " 79%|███████▉  | 15869/20000 [06:49<01:35, 43.09it/s]\u001b[A\n",
      " 80%|███████▉  | 15921/20000 [06:50<01:35, 42.91it/s]\u001b[A\n",
      " 80%|███████▉  | 15974/20000 [06:51<01:34, 42.57it/s]\u001b[A\n",
      " 80%|████████  | 16026/20000 [06:52<01:37, 40.96it/s]\u001b[A\n",
      " 80%|████████  | 16078/20000 [06:54<01:38, 39.78it/s]\u001b[A\n",
      " 81%|████████  | 16131/20000 [06:55<01:39, 38.82it/s]\u001b[A\n",
      " 81%|████████  | 16183/20000 [06:57<01:36, 39.39it/s]\u001b[A\n",
      " 81%|████████  | 16235/20000 [06:58<01:41, 37.18it/s]\u001b[A\n",
      " 81%|████████▏ | 16288/20000 [06:59<01:34, 39.16it/s]\u001b[A\n",
      " 82%|████████▏ | 16340/20000 [07:01<01:31, 39.79it/s]\u001b[A\n",
      " 82%|████████▏ | 16392/20000 [07:02<01:29, 40.49it/s]\u001b[A\n",
      " 82%|████████▏ | 16445/20000 [07:03<01:25, 41.56it/s]\u001b[A\n",
      " 82%|████████▏ | 16497/20000 [07:04<01:23, 41.93it/s]\u001b[A\n",
      " 83%|████████▎ | 16549/20000 [07:05<01:21, 42.37it/s]\u001b[A\n",
      " 83%|████████▎ | 16602/20000 [07:07<01:20, 42.38it/s]\u001b[A\n",
      " 83%|████████▎ | 16654/20000 [07:08<01:18, 42.61it/s]\u001b[A\n",
      " 84%|████████▎ | 16706/20000 [07:09<01:16, 43.04it/s]\u001b[A\n",
      " 84%|████████▍ | 16759/20000 [07:10<01:15, 43.19it/s]\u001b[A\n",
      " 84%|████████▍ | 16811/20000 [07:11<01:13, 43.42it/s]\u001b[A\n",
      " 84%|████████▍ | 16863/20000 [07:13<01:12, 43.17it/s]\u001b[A\n",
      " 85%|████████▍ | 16916/20000 [07:14<01:11, 43.39it/s]\u001b[A\n",
      " 85%|████████▍ | 16968/20000 [07:15<01:11, 42.54it/s]\u001b[A\n",
      " 85%|████████▌ | 17020/20000 [07:16<01:09, 42.71it/s]\u001b[A\n",
      " 85%|████████▌ | 17073/20000 [07:18<01:07, 43.37it/s]\u001b[A\n",
      " 86%|████████▌ | 17125/20000 [07:19<01:06, 43.05it/s]\u001b[A\n",
      " 86%|████████▌ | 17177/20000 [07:20<01:05, 42.92it/s]\u001b[A\n",
      " 86%|████████▌ | 17230/20000 [07:21<01:04, 43.05it/s]\u001b[A\n",
      " 86%|████████▋ | 17282/20000 [07:22<01:03, 42.74it/s]\u001b[A\n",
      " 87%|████████▋ | 17334/20000 [07:24<01:02, 42.61it/s]\u001b[A\n",
      " 87%|████████▋ | 17387/20000 [07:25<01:02, 41.49it/s]\u001b[A\n",
      " 87%|████████▋ | 17439/20000 [07:26<01:04, 39.58it/s]\u001b[A\n",
      " 87%|████████▋ | 17491/20000 [07:28<01:02, 39.96it/s]\u001b[A\n",
      " 88%|████████▊ | 17544/20000 [07:29<01:00, 40.84it/s]\u001b[A\n",
      " 88%|████████▊ | 17596/20000 [07:30<00:58, 41.38it/s]\u001b[A\n",
      " 88%|████████▊ | 17648/20000 [07:31<00:56, 41.75it/s]\u001b[A\n",
      " 89%|████████▊ | 17701/20000 [07:33<00:55, 41.14it/s]\u001b[A\n",
      " 89%|████████▉ | 17753/20000 [07:34<00:54, 41.32it/s]\u001b[A\n",
      " 89%|████████▉ | 17805/20000 [07:35<00:52, 41.51it/s]\u001b[A\n",
      " 89%|████████▉ | 17858/20000 [07:36<00:51, 41.90it/s]\u001b[A\n",
      " 90%|████████▉ | 17910/20000 [07:38<00:49, 41.89it/s]\u001b[A\n",
      " 90%|████████▉ | 17962/20000 [07:39<00:48, 41.94it/s]\u001b[A\n",
      " 90%|█████████ | 18015/20000 [07:40<00:46, 42.50it/s]\u001b[A\n",
      " 90%|█████████ | 18067/20000 [07:41<00:45, 42.74it/s]\u001b[A\n",
      " 91%|█████████ | 18119/20000 [07:43<00:43, 42.78it/s]\u001b[A\n",
      " 91%|█████████ | 18172/20000 [07:44<00:42, 43.08it/s]\u001b[A\n",
      " 91%|█████████ | 18224/20000 [07:45<00:41, 42.96it/s]\u001b[A\n",
      " 91%|█████████▏| 18276/20000 [07:46<00:40, 42.77it/s]\u001b[A\n",
      " 92%|█████████▏| 18329/20000 [07:47<00:39, 42.51it/s]\u001b[A\n",
      " 92%|█████████▏| 18381/20000 [07:49<00:38, 42.48it/s]\u001b[A\n",
      " 92%|█████████▏| 18433/20000 [07:50<00:36, 42.51it/s]\u001b[A\n",
      " 92%|█████████▏| 18486/20000 [07:51<00:35, 43.12it/s]\u001b[A\n",
      " 93%|█████████▎| 18538/20000 [07:52<00:33, 43.20it/s]\u001b[A\n",
      " 93%|█████████▎| 18590/20000 [07:54<00:34, 41.01it/s]\u001b[A\n",
      " 93%|█████████▎| 18643/20000 [07:55<00:34, 39.81it/s]\u001b[A\n",
      " 93%|█████████▎| 18695/20000 [07:57<00:34, 38.34it/s]\u001b[A\n",
      " 94%|█████████▎| 18747/20000 [07:58<00:31, 39.47it/s]\u001b[A\n",
      " 94%|█████████▍| 18800/20000 [07:59<00:29, 40.45it/s]\u001b[A\n",
      " 94%|█████████▍| 18852/20000 [08:00<00:28, 40.65it/s]\u001b[A\n",
      " 95%|█████████▍| 18904/20000 [08:02<00:26, 40.96it/s]\u001b[A\n",
      " 95%|█████████▍| 18957/20000 [08:03<00:25, 41.47it/s]\u001b[A\n",
      " 95%|█████████▌| 19009/20000 [08:04<00:23, 42.22it/s]\u001b[A\n",
      " 95%|█████████▌| 19061/20000 [08:05<00:22, 42.28it/s]\u001b[A\n",
      " 96%|█████████▌| 19114/20000 [08:07<00:21, 42.10it/s]\u001b[A\n",
      " 96%|█████████▌| 19166/20000 [08:08<00:19, 42.25it/s]\u001b[A\n",
      " 96%|█████████▌| 19218/20000 [08:09<00:18, 42.59it/s]\u001b[A\n",
      " 96%|█████████▋| 19271/20000 [08:10<00:17, 42.75it/s]\u001b[A\n",
      " 97%|█████████▋| 19323/20000 [08:11<00:15, 42.81it/s]\u001b[A\n",
      " 97%|█████████▋| 19375/20000 [08:13<00:14, 43.02it/s]\u001b[A\n",
      " 97%|█████████▋| 19428/20000 [08:14<00:13, 43.28it/s]\u001b[A\n",
      " 97%|█████████▋| 19480/20000 [08:15<00:12, 42.53it/s]\u001b[A\n",
      " 98%|█████████▊| 19532/20000 [08:16<00:10, 42.74it/s]\u001b[A\n",
      " 98%|█████████▊| 19585/20000 [08:17<00:09, 43.06it/s]\u001b[A\n",
      " 98%|█████████▊| 19637/20000 [08:19<00:08, 42.76it/s]\u001b[A\n",
      " 98%|█████████▊| 19689/20000 [08:20<00:07, 42.82it/s]\u001b[A\n",
      " 99%|█████████▊| 19742/20000 [08:21<00:05, 43.25it/s]\u001b[A\n",
      " 99%|█████████▉| 19794/20000 [08:22<00:04, 43.22it/s]\u001b[A\n",
      " 99%|█████████▉| 19846/20000 [08:23<00:03, 43.81it/s]\u001b[A\n",
      " 99%|█████████▉| 19899/20000 [08:25<00:02, 43.39it/s]\u001b[A\n",
      "100%|█████████▉| 19951/20000 [08:26<00:01, 43.22it/s]\u001b[A\n",
      "20003it [08:27, 42.83it/s]                           \u001b[A\n",
      "\u001b[A"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GANbalancer(auxiliary=False, batch_size=64, categorical=None,\n",
       "      critic_iterations=3, critic_layers=[50, 50],\n",
       "      gan_architecture='fisher', generator_input=4, generator_layers=[50],\n",
       "      idx_cont=range(0, 2), layer_norm=True, learning_rate=[5e-05, 5e-05],\n",
       "      n_iter=20000, random_state=None, sampling_strategy={0: 10000, 1: 0},\n",
       "      training_gif=True, verbose=2)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gan_balancer._fit(data[data_idx][0], y=np.zeros(shape=N_SAMPLES))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  0%|          | 0/20000 [00:00<?, ?it/s]\u001b[A\n",
      "  0%|          | 52/20000 [00:01<08:07, 40.90it/s]\u001b[A\n",
      "  1%|          | 105/20000 [00:02<08:13, 40.28it/s]\u001b[A\n",
      "  1%|          | 157/20000 [00:04<08:27, 39.11it/s]\u001b[A\n",
      "  1%|          | 209/20000 [00:05<08:48, 37.47it/s]\u001b[A\n",
      "  1%|▏         | 262/20000 [00:06<08:39, 38.01it/s]\u001b[A\n",
      "  2%|▏         | 314/20000 [00:08<08:27, 38.81it/s]\u001b[A\n",
      "  2%|▏         | 366/20000 [00:09<08:12, 39.83it/s]\u001b[A\n",
      "  2%|▏         | 419/20000 [00:10<07:56, 41.08it/s]\u001b[A\n",
      "  2%|▏         | 471/20000 [00:11<07:44, 42.00it/s]\u001b[A\n",
      "  3%|▎         | 523/20000 [00:13<07:43, 42.06it/s]\u001b[A\n",
      "  3%|▎         | 576/20000 [00:14<07:45, 41.74it/s]\u001b[A\n",
      "  3%|▎         | 628/20000 [00:15<07:54, 40.85it/s]\u001b[A\n",
      "  3%|▎         | 680/20000 [00:17<08:06, 39.71it/s]\u001b[A\n",
      "  4%|▎         | 733/20000 [00:18<08:10, 39.31it/s]\u001b[A\n",
      "  4%|▍         | 785/20000 [00:20<09:28, 33.82it/s]\u001b[A\n",
      "  4%|▍         | 837/20000 [00:21<08:49, 36.22it/s]\u001b[A\n",
      "  4%|▍         | 890/20000 [00:22<08:17, 38.41it/s]\u001b[A\n",
      "  5%|▍         | 942/20000 [00:24<07:57, 39.89it/s]\u001b[A\n",
      "  5%|▍         | 994/20000 [00:25<07:47, 40.69it/s]\u001b[A\n",
      "  5%|▌         | 1047/20000 [00:26<07:34, 41.69it/s]\u001b[A\n",
      "  5%|▌         | 1099/20000 [00:27<07:27, 42.28it/s]\u001b[A\n",
      "  6%|▌         | 1151/20000 [00:28<07:22, 42.63it/s]\u001b[A\n",
      "  6%|▌         | 1204/20000 [00:30<07:41, 40.69it/s]\u001b[A\n",
      "  6%|▋         | 1256/20000 [00:31<07:35, 41.13it/s]\u001b[A\n",
      "  7%|▋         | 1308/20000 [00:32<07:26, 41.89it/s]\u001b[A\n",
      "  7%|▋         | 1361/20000 [00:33<07:16, 42.66it/s]\u001b[A\n",
      "  7%|▋         | 1413/20000 [00:35<07:16, 42.61it/s]\u001b[A\n",
      "  7%|▋         | 1465/20000 [00:36<07:15, 42.59it/s]\u001b[A\n",
      "  8%|▊         | 1518/20000 [00:37<07:08, 43.12it/s]\u001b[A\n",
      "  8%|▊         | 1570/20000 [00:38<07:06, 43.23it/s]\u001b[A\n",
      "  8%|▊         | 1622/20000 [00:39<07:08, 42.88it/s]\u001b[A\n",
      "  8%|▊         | 1675/20000 [00:41<07:04, 43.20it/s]\u001b[A\n",
      "  9%|▊         | 1727/20000 [00:42<07:01, 43.33it/s]\u001b[A\n",
      "  9%|▉         | 1779/20000 [00:43<06:54, 43.97it/s]\u001b[A\n",
      "  9%|▉         | 1832/20000 [00:44<06:58, 43.45it/s]\u001b[A\n",
      "  9%|▉         | 1884/20000 [00:45<06:54, 43.68it/s]\u001b[A\n",
      " 10%|▉         | 1936/20000 [00:47<06:50, 43.96it/s]\u001b[A\n",
      " 10%|▉         | 1989/20000 [00:48<06:51, 43.79it/s]\u001b[A\n",
      " 10%|█         | 2041/20000 [00:49<06:48, 43.96it/s]\u001b[A\n",
      " 10%|█         | 2093/20000 [00:50<06:50, 43.62it/s]\u001b[A\n",
      " 11%|█         | 2146/20000 [00:51<06:47, 43.77it/s]\u001b[A\n",
      " 11%|█         | 2198/20000 [00:53<06:50, 43.40it/s]\u001b[A\n",
      " 11%|█▏        | 2250/20000 [00:54<06:49, 43.32it/s]\u001b[A\n",
      " 12%|█▏        | 2303/20000 [00:55<06:44, 43.76it/s]\u001b[A\n",
      " 12%|█▏        | 2355/20000 [00:56<06:44, 43.62it/s]\u001b[A\n",
      " 12%|█▏        | 2407/20000 [00:57<06:41, 43.77it/s]\u001b[A\n",
      " 12%|█▏        | 2460/20000 [00:59<06:38, 44.07it/s]\u001b[A\n",
      " 13%|█▎        | 2512/20000 [01:00<06:44, 43.28it/s]\u001b[A\n",
      " 13%|█▎        | 2564/20000 [01:01<06:44, 43.14it/s]\u001b[A\n",
      " 13%|█▎        | 2617/20000 [01:02<06:52, 42.11it/s]\u001b[A\n",
      " 13%|█▎        | 2669/20000 [01:04<07:08, 40.48it/s]\u001b[A\n",
      " 14%|█▎        | 2721/20000 [01:05<07:17, 39.50it/s]\u001b[A\n",
      " 14%|█▍        | 2774/20000 [01:07<07:23, 38.83it/s]\u001b[A\n",
      " 14%|█▍        | 2826/20000 [01:08<07:08, 40.04it/s]\u001b[A\n",
      " 14%|█▍        | 2878/20000 [01:09<06:59, 40.82it/s]\u001b[A\n",
      " 15%|█▍        | 2931/20000 [01:10<06:48, 41.79it/s]\u001b[A\n",
      " 15%|█▍        | 2983/20000 [01:11<06:40, 42.47it/s]\u001b[A\n",
      " 15%|█▌        | 3035/20000 [01:13<06:37, 42.70it/s]\u001b[A\n",
      " 15%|█▌        | 3088/20000 [01:14<06:34, 42.85it/s]\u001b[A\n",
      " 16%|█▌        | 3140/20000 [01:15<06:29, 43.34it/s]\u001b[A\n",
      " 16%|█▌        | 3192/20000 [01:16<06:37, 42.25it/s]\u001b[A\n",
      " 16%|█▌        | 3245/20000 [01:17<06:29, 43.07it/s]\u001b[A\n",
      " 16%|█▋        | 3297/20000 [01:19<06:31, 42.70it/s]\u001b[A\n",
      " 17%|█▋        | 3349/20000 [01:20<06:29, 42.77it/s]\u001b[A\n",
      " 17%|█▋        | 3402/20000 [01:21<06:24, 43.13it/s]\u001b[A\n",
      " 17%|█▋        | 3454/20000 [01:22<06:19, 43.63it/s]\u001b[A\n",
      " 18%|█▊        | 3506/20000 [01:23<06:15, 43.96it/s]\u001b[A\n",
      " 18%|█▊        | 3559/20000 [01:25<06:12, 44.08it/s]\u001b[A\n",
      " 18%|█▊        | 3611/20000 [01:26<06:12, 43.94it/s]\u001b[A\n",
      " 18%|█▊        | 3663/20000 [01:27<06:11, 43.97it/s]\u001b[A\n",
      " 19%|█▊        | 3716/20000 [01:28<06:10, 43.98it/s]\u001b[A\n",
      " 19%|█▉        | 3768/20000 [01:29<06:14, 43.29it/s]\u001b[A\n",
      " 19%|█▉        | 3820/20000 [01:31<06:11, 43.55it/s]\u001b[A\n",
      " 19%|█▉        | 3873/20000 [01:32<06:09, 43.61it/s]\u001b[A\n",
      " 20%|█▉        | 3925/20000 [01:33<06:07, 43.78it/s]\u001b[A\n",
      " 20%|█▉        | 3977/20000 [01:34<06:07, 43.59it/s]\u001b[A\n",
      " 20%|██        | 4030/20000 [01:35<06:05, 43.66it/s]\u001b[A\n",
      " 20%|██        | 4082/20000 [01:37<06:03, 43.76it/s]\u001b[A\n",
      " 21%|██        | 4134/20000 [01:38<05:59, 44.11it/s]\u001b[A\n",
      " 21%|██        | 4187/20000 [01:39<05:56, 44.38it/s]\u001b[A\n",
      " 21%|██        | 4239/20000 [01:40<06:05, 43.17it/s]\u001b[A\n",
      " 21%|██▏       | 4291/20000 [01:41<06:03, 43.27it/s]\u001b[A\n",
      " 22%|██▏       | 4344/20000 [01:43<05:59, 43.60it/s]\u001b[A\n",
      " 22%|██▏       | 4396/20000 [01:44<05:55, 43.85it/s]\u001b[A\n",
      " 22%|██▏       | 4448/20000 [01:45<05:55, 43.69it/s]\u001b[A\n",
      " 23%|██▎       | 4501/20000 [01:46<05:51, 44.09it/s]\u001b[A\n",
      " 23%|██▎       | 4553/20000 [01:47<05:48, 44.30it/s]\u001b[A\n",
      " 23%|██▎       | 4605/20000 [01:48<05:46, 44.45it/s]\u001b[A\n",
      " 23%|██▎       | 4658/20000 [01:50<05:49, 43.89it/s]\u001b[A\n",
      " 24%|██▎       | 4710/20000 [01:51<06:05, 41.81it/s]\u001b[A\n",
      " 24%|██▍       | 4762/20000 [01:52<06:10, 41.17it/s]\u001b[A\n",
      " 24%|██▍       | 4815/20000 [01:54<06:02, 41.91it/s]\u001b[A\n",
      " 24%|██▍       | 4867/20000 [01:55<05:56, 42.45it/s]\u001b[A\n",
      " 25%|██▍       | 4919/20000 [01:56<05:52, 42.78it/s]\u001b[A\n",
      " 25%|██▍       | 4972/20000 [01:57<05:47, 43.28it/s]\u001b[A\n",
      " 25%|██▌       | 5024/20000 [01:59<05:54, 42.21it/s]\u001b[A\n",
      " 25%|██▌       | 5076/20000 [02:00<05:50, 42.61it/s]\u001b[A\n",
      " 26%|██▌       | 5129/20000 [02:01<05:45, 43.10it/s]\u001b[A\n",
      " 26%|██▌       | 5181/20000 [02:02<05:39, 43.67it/s]\u001b[A\n",
      " 26%|██▌       | 5233/20000 [02:03<05:36, 43.84it/s]\u001b[A\n",
      " 26%|██▋       | 5286/20000 [02:05<05:55, 41.43it/s]\u001b[A\n",
      " 27%|██▋       | 5338/20000 [02:06<06:05, 40.14it/s]\u001b[A\n",
      " 27%|██▋       | 5390/20000 [02:09<07:52, 30.95it/s]\u001b[A\n",
      " 27%|██▋       | 5443/20000 [02:10<07:08, 33.96it/s]\u001b[A\n",
      " 27%|██▋       | 5495/20000 [02:11<06:37, 36.49it/s]\u001b[A\n",
      " 28%|██▊       | 5547/20000 [02:12<06:18, 38.22it/s]\u001b[A\n",
      " 28%|██▊       | 5600/20000 [02:13<06:01, 39.80it/s]\u001b[A\n",
      " 28%|██▊       | 5652/20000 [02:15<05:53, 40.56it/s]\u001b[A\n",
      " 29%|██▊       | 5704/20000 [02:16<05:43, 41.58it/s]\u001b[A\n",
      " 29%|██▉       | 5757/20000 [02:17<05:37, 42.22it/s]\u001b[A\n",
      " 29%|██▉       | 5809/20000 [02:18<05:33, 42.53it/s]\u001b[A\n",
      " 29%|██▉       | 5861/20000 [02:19<05:29, 42.91it/s]\u001b[A\n",
      " 30%|██▉       | 5914/20000 [02:21<05:28, 42.84it/s]\u001b[A\n",
      " 30%|██▉       | 5966/20000 [02:22<05:25, 43.13it/s]\u001b[A\n",
      " 30%|███       | 6018/20000 [02:23<05:22, 43.41it/s]\u001b[A\n",
      " 30%|███       | 6071/20000 [02:24<05:21, 43.37it/s]\u001b[A\n",
      " 31%|███       | 6123/20000 [02:25<05:18, 43.58it/s]\u001b[A\n",
      " 31%|███       | 6175/20000 [02:27<05:20, 43.10it/s]\u001b[A\n",
      " 31%|███       | 6228/20000 [02:28<05:17, 43.40it/s]\u001b[A\n",
      " 31%|███▏      | 6280/20000 [02:29<05:19, 42.94it/s]\u001b[A\n",
      " 32%|███▏      | 6332/20000 [02:30<05:17, 43.00it/s]\u001b[A\n",
      " 32%|███▏      | 6385/20000 [02:32<05:13, 43.40it/s]\u001b[A\n",
      " 32%|███▏      | 6437/20000 [02:33<05:12, 43.38it/s]\u001b[A\n",
      " 32%|███▏      | 6489/20000 [02:34<05:13, 43.09it/s]\u001b[A\n",
      " 33%|███▎      | 6542/20000 [02:35<05:09, 43.44it/s]\u001b[A\n",
      " 33%|███▎      | 6594/20000 [02:36<05:06, 43.79it/s]\u001b[A\n",
      " 33%|███▎      | 6646/20000 [02:37<05:03, 43.94it/s]\u001b[A\n",
      " 33%|███▎      | 6699/20000 [02:39<05:00, 44.22it/s]\u001b[A\n",
      " 34%|███▍      | 6751/20000 [02:40<04:59, 44.20it/s]\u001b[A\n",
      " 34%|███▍      | 6803/20000 [02:41<05:01, 43.80it/s]\u001b[A\n",
      " 34%|███▍      | 6856/20000 [02:42<04:59, 43.95it/s]\u001b[A\n",
      " 35%|███▍      | 6908/20000 [02:43<04:57, 44.00it/s]\u001b[A\n",
      " 35%|███▍      | 6960/20000 [02:45<05:01, 43.26it/s]\u001b[A\n",
      " 35%|███▌      | 7013/20000 [02:46<04:55, 43.90it/s]\u001b[A\n",
      " 35%|███▌      | 7065/20000 [02:47<04:54, 43.99it/s]\u001b[A\n",
      " 36%|███▌      | 7117/20000 [02:48<04:53, 43.93it/s]\u001b[A\n",
      " 36%|███▌      | 7170/20000 [02:49<04:54, 43.61it/s]\u001b[A\n",
      " 36%|███▌      | 7222/20000 [02:51<04:52, 43.65it/s]\u001b[A\n",
      " 36%|███▋      | 7274/20000 [02:52<05:02, 42.04it/s]\u001b[A\n",
      " 37%|███▋      | 7327/20000 [02:53<04:57, 42.61it/s]\u001b[A\n",
      " 37%|███▋      | 7379/20000 [02:54<04:56, 42.53it/s]\u001b[A\n",
      " 37%|███▋      | 7431/20000 [02:56<04:59, 42.01it/s]\u001b[A\n",
      " 37%|███▋      | 7484/20000 [02:58<05:44, 36.35it/s]\u001b[A\n",
      " 38%|███▊      | 7536/20000 [02:59<05:30, 37.68it/s]\u001b[A\n",
      " 38%|███▊      | 7588/20000 [03:00<05:21, 38.64it/s]\u001b[A\n",
      " 38%|███▊      | 7641/20000 [03:02<05:20, 38.51it/s]\u001b[A\n",
      " 38%|███▊      | 7693/20000 [03:03<05:55, 34.57it/s]\u001b[A\n",
      " 39%|███▊      | 7745/20000 [03:05<06:13, 32.81it/s]\u001b[A\n",
      " 39%|███▉      | 7798/20000 [03:07<05:57, 34.17it/s]\u001b[A\n",
      " 39%|███▉      | 7850/20000 [03:08<05:46, 35.05it/s]\u001b[A\n",
      " 40%|███▉      | 7902/20000 [03:09<05:29, 36.68it/s]\u001b[A\n",
      " 40%|███▉      | 7955/20000 [03:10<05:11, 38.67it/s]\u001b[A\n",
      " 40%|████      | 8007/20000 [03:12<04:59, 40.07it/s]\u001b[A\n",
      " 40%|████      | 8059/20000 [03:13<04:48, 41.36it/s]\u001b[A\n",
      " 41%|████      | 8112/20000 [03:14<04:43, 41.90it/s]\u001b[A\n",
      " 41%|████      | 8164/20000 [03:15<04:44, 41.63it/s]\u001b[A\n",
      " 41%|████      | 8216/20000 [03:17<04:54, 39.97it/s]\u001b[A\n",
      " 41%|████▏     | 8269/20000 [03:18<05:01, 38.91it/s]\u001b[A\n",
      " 42%|████▏     | 8321/20000 [03:19<04:58, 39.16it/s]\u001b[A\n",
      " 42%|████▏     | 8373/20000 [03:21<04:48, 40.24it/s]\u001b[A\n",
      " 42%|████▏     | 8426/20000 [03:22<04:39, 41.38it/s]\u001b[A\n",
      " 42%|████▏     | 8478/20000 [03:23<04:34, 42.01it/s]\u001b[A\n",
      " 43%|████▎     | 8530/20000 [03:24<04:30, 42.36it/s]\u001b[A\n",
      " 43%|████▎     | 8583/20000 [03:25<04:23, 43.27it/s]\u001b[A\n",
      " 43%|████▎     | 8635/20000 [03:27<04:23, 43.13it/s]\u001b[A\n",
      " 43%|████▎     | 8687/20000 [03:28<04:21, 43.29it/s]\u001b[A\n",
      " 44%|████▎     | 8740/20000 [03:29<04:22, 42.96it/s]\u001b[A\n",
      " 44%|████▍     | 8792/20000 [03:30<04:21, 42.93it/s]\u001b[A\n",
      " 44%|████▍     | 8844/20000 [03:31<04:17, 43.38it/s]\u001b[A\n",
      " 44%|████▍     | 8897/20000 [03:33<04:31, 40.89it/s]\u001b[A\n",
      " 45%|████▍     | 8949/20000 [03:35<05:22, 34.30it/s]\u001b[A\n",
      " 45%|████▌     | 9001/20000 [03:36<05:04, 36.18it/s]\u001b[A\n",
      " 45%|████▌     | 9054/20000 [03:38<05:35, 32.63it/s]\u001b[A\n",
      " 46%|████▌     | 9106/20000 [03:40<05:55, 30.61it/s]\u001b[A\n",
      " 46%|████▌     | 9158/20000 [03:42<05:39, 31.92it/s]\u001b[A\n",
      " 46%|████▌     | 9211/20000 [03:43<05:11, 34.63it/s]\u001b[A\n",
      " 46%|████▋     | 9263/20000 [03:44<04:51, 36.87it/s]\u001b[A\n",
      " 47%|████▋     | 9315/20000 [03:45<04:34, 38.92it/s]\u001b[A\n",
      " 47%|████▋     | 9368/20000 [03:46<04:22, 40.43it/s]\u001b[A\n",
      " 47%|████▋     | 9420/20000 [03:48<04:16, 41.31it/s]\u001b[A\n",
      " 47%|████▋     | 9472/20000 [03:49<04:12, 41.64it/s]\u001b[A\n",
      " 48%|████▊     | 9525/20000 [03:50<04:07, 42.40it/s]\u001b[A\n",
      " 48%|████▊     | 9577/20000 [03:51<04:01, 43.08it/s]\u001b[A\n",
      " 48%|████▊     | 9629/20000 [03:52<03:58, 43.46it/s]\u001b[A\n",
      " 48%|████▊     | 9682/20000 [03:54<03:55, 43.89it/s]\u001b[A\n",
      " 49%|████▊     | 9734/20000 [03:55<03:53, 43.96it/s]\u001b[A\n",
      " 49%|████▉     | 9786/20000 [03:56<03:52, 43.85it/s]\u001b[A\n",
      " 49%|████▉     | 9839/20000 [03:57<03:48, 44.41it/s]\u001b[A\n",
      " 49%|████▉     | 9891/20000 [03:58<03:46, 44.69it/s]\u001b[A\n",
      " 50%|████▉     | 9943/20000 [03:59<03:47, 44.30it/s]\u001b[A\n",
      " 50%|████▉     | 9996/20000 [04:01<03:46, 44.15it/s]\u001b[A\n",
      " 50%|█████     | 10048/20000 [04:02<03:44, 44.30it/s]\u001b[A\n",
      " 50%|█████     | 10100/20000 [04:03<03:42, 44.43it/s]\u001b[A\n",
      " 51%|█████     | 10153/20000 [04:04<03:43, 43.99it/s]\u001b[A\n",
      " 51%|█████     | 10205/20000 [04:06<04:20, 37.61it/s]\u001b[A\n",
      " 51%|█████▏    | 10257/20000 [04:08<04:40, 34.73it/s]\u001b[A\n",
      " 52%|█████▏    | 10310/20000 [04:09<04:35, 35.11it/s]\u001b[A\n",
      " 52%|█████▏    | 10362/20000 [04:11<04:30, 35.64it/s]\u001b[A\n",
      " 52%|█████▏    | 10414/20000 [04:12<04:17, 37.23it/s]\u001b[A\n",
      " 52%|█████▏    | 10467/20000 [04:14<04:37, 34.37it/s]\u001b[A\n",
      " 53%|█████▎    | 10519/20000 [04:16<05:18, 29.75it/s]\u001b[A\n",
      " 53%|█████▎    | 10571/20000 [04:19<06:08, 25.56it/s]\u001b[A\n",
      " 53%|█████▎    | 10624/20000 [04:21<06:07, 25.50it/s]\u001b[A\n",
      " 53%|█████▎    | 10676/20000 [04:23<06:01, 25.77it/s]\u001b[A\n",
      " 54%|█████▎    | 10728/20000 [04:25<06:18, 24.51it/s]\u001b[A\n",
      " 54%|█████▍    | 10781/20000 [04:27<06:09, 24.95it/s]\u001b[A\n",
      " 54%|█████▍    | 10833/20000 [04:29<06:00, 25.45it/s]\u001b[A\n",
      " 54%|█████▍    | 10885/20000 [04:31<05:58, 25.40it/s]\u001b[A\n",
      " 55%|█████▍    | 10938/20000 [04:33<06:05, 24.78it/s]\u001b[A\n",
      " 55%|█████▍    | 10990/20000 [04:36<06:30, 23.05it/s]\u001b[A\n",
      " 55%|█████▌    | 11042/20000 [04:38<06:29, 22.99it/s]\u001b[A\n",
      " 55%|█████▌    | 11095/20000 [04:40<06:10, 24.04it/s]\u001b[A\n",
      " 56%|█████▌    | 11147/20000 [04:42<06:05, 24.25it/s]\u001b[A\n",
      " 56%|█████▌    | 11199/20000 [04:45<06:26, 22.77it/s]\u001b[A\n",
      " 56%|█████▋    | 11252/20000 [04:47<06:19, 23.02it/s]\u001b[A\n",
      " 57%|█████▋    | 11304/20000 [04:50<06:23, 22.65it/s]\u001b[A\n",
      " 57%|█████▋    | 11356/20000 [04:52<06:20, 22.73it/s]\u001b[A\n",
      " 57%|█████▋    | 11409/20000 [04:54<06:00, 23.85it/s]\u001b[A\n",
      " 57%|█████▋    | 11461/20000 [04:56<06:12, 22.90it/s]\u001b[A\n",
      " 58%|█████▊    | 11513/20000 [04:59<06:11, 22.84it/s]\u001b[A\n",
      " 58%|█████▊    | 11566/20000 [05:01<06:09, 22.80it/s]\u001b[A\n",
      " 58%|█████▊    | 11618/20000 [05:03<05:57, 23.44it/s]\u001b[A\n",
      " 58%|█████▊    | 11670/20000 [05:05<05:58, 23.25it/s]\u001b[A\n",
      " 59%|█████▊    | 11723/20000 [05:08<06:05, 22.62it/s]\u001b[A\n",
      " 59%|█████▉    | 11775/20000 [05:10<06:06, 22.42it/s]\u001b[A\n",
      " 59%|█████▉    | 11827/20000 [05:12<05:14, 25.98it/s]\u001b[A\n",
      " 59%|█████▉    | 11880/20000 [05:13<04:35, 29.45it/s]\u001b[A\n",
      " 60%|█████▉    | 11932/20000 [05:14<04:12, 31.95it/s]\u001b[A\n",
      " 60%|█████▉    | 11984/20000 [05:15<03:52, 34.45it/s]\u001b[A\n",
      " 60%|██████    | 12037/20000 [05:16<03:35, 36.94it/s]\u001b[A\n",
      " 60%|██████    | 12089/20000 [05:18<03:23, 38.84it/s]\u001b[A\n",
      " 61%|██████    | 12141/20000 [05:19<03:16, 40.03it/s]\u001b[A\n",
      " 61%|██████    | 12194/20000 [05:20<03:07, 41.67it/s]\u001b[A\n",
      " 61%|██████    | 12246/20000 [05:21<03:02, 42.58it/s]\u001b[A\n",
      " 61%|██████▏   | 12298/20000 [05:22<02:57, 43.30it/s]\u001b[A\n",
      " 62%|██████▏   | 12351/20000 [05:23<02:53, 44.03it/s]\u001b[A\n",
      " 62%|██████▏   | 12403/20000 [05:25<02:52, 44.03it/s]\u001b[A\n",
      " 62%|██████▏   | 12455/20000 [05:26<02:51, 43.99it/s]\u001b[A\n",
      " 63%|██████▎   | 12508/20000 [05:27<02:47, 44.61it/s]\u001b[A\n",
      " 63%|██████▎   | 12560/20000 [05:28<02:46, 44.64it/s]\u001b[A\n",
      " 63%|██████▎   | 12612/20000 [05:29<02:45, 44.56it/s]\u001b[A\n",
      " 63%|██████▎   | 12665/20000 [05:31<02:44, 44.69it/s]\u001b[A\n",
      " 64%|██████▎   | 12717/20000 [05:32<02:46, 43.70it/s]\u001b[A\n",
      " 64%|██████▍   | 12769/20000 [05:33<02:45, 43.62it/s]\u001b[A\n",
      " 64%|██████▍   | 12822/20000 [05:34<02:44, 43.63it/s]\u001b[A\n",
      " 64%|██████▍   | 12874/20000 [05:35<02:42, 43.92it/s]\u001b[A\n",
      " 65%|██████▍   | 12926/20000 [05:36<02:38, 44.70it/s]\u001b[A\n",
      " 65%|██████▍   | 12979/20000 [05:38<02:52, 40.75it/s]\u001b[A\n",
      " 65%|██████▌   | 13031/20000 [05:39<02:53, 40.08it/s]\u001b[A\n",
      " 65%|██████▌   | 13083/20000 [05:41<02:58, 38.82it/s]\u001b[A\n",
      " 66%|██████▌   | 13136/20000 [05:43<03:23, 33.78it/s]\u001b[A\n",
      " 66%|██████▌   | 13188/20000 [05:44<03:23, 33.54it/s]\u001b[A\n",
      " 66%|██████▌   | 13240/20000 [05:46<03:21, 33.56it/s]\u001b[A\n",
      " 66%|██████▋   | 13293/20000 [05:47<03:08, 35.51it/s]\u001b[A\n",
      " 67%|██████▋   | 13345/20000 [05:49<03:08, 35.29it/s]\u001b[A\n",
      " 67%|██████▋   | 13397/20000 [05:50<03:14, 33.97it/s]\u001b[A\n",
      " 67%|██████▋   | 13450/20000 [05:52<03:11, 34.21it/s]\u001b[A\n",
      " 68%|██████▊   | 13502/20000 [05:53<03:07, 34.60it/s]\u001b[A\n",
      " 68%|██████▊   | 13554/20000 [05:55<03:09, 33.97it/s]\u001b[A\n",
      " 68%|██████▊   | 13607/20000 [05:56<03:03, 34.75it/s]\u001b[A\n",
      " 68%|██████▊   | 13659/20000 [05:58<02:54, 36.31it/s]\u001b[A\n",
      " 69%|██████▊   | 13711/20000 [05:59<02:57, 35.40it/s]\u001b[A\n",
      " 69%|██████▉   | 13764/20000 [06:02<03:25, 30.42it/s]\u001b[A\n",
      " 69%|██████▉   | 13816/20000 [06:04<03:32, 29.12it/s]\u001b[A\n",
      " 69%|██████▉   | 13868/20000 [06:06<03:41, 27.66it/s]\u001b[A\n",
      " 70%|██████▉   | 13921/20000 [06:09<04:14, 23.90it/s]\u001b[A\n",
      " 70%|██████▉   | 13973/20000 [06:12<04:52, 20.58it/s]\u001b[A\n",
      " 70%|███████   | 14025/20000 [06:14<04:30, 22.09it/s]\u001b[A\n",
      " 70%|███████   | 14078/20000 [06:16<04:15, 23.17it/s]\u001b[A\n",
      " 71%|███████   | 14130/20000 [06:18<04:08, 23.63it/s]\u001b[A\n",
      " 71%|███████   | 14182/20000 [06:20<03:43, 26.00it/s]\u001b[A\n",
      " 71%|███████   | 14235/20000 [06:21<03:26, 27.98it/s]\u001b[A\n",
      " 71%|███████▏  | 14287/20000 [06:23<03:13, 29.54it/s]\u001b[A\n",
      " 72%|███████▏  | 14339/20000 [06:24<03:01, 31.19it/s]\u001b[A\n",
      " 72%|███████▏  | 14392/20000 [06:25<02:48, 33.34it/s]\u001b[A\n",
      " 72%|███████▏  | 14444/20000 [06:27<02:37, 35.28it/s]\u001b[A\n",
      " 72%|███████▏  | 14496/20000 [06:28<02:36, 35.14it/s]\u001b[A\n",
      " 73%|███████▎  | 14549/20000 [06:30<02:35, 34.97it/s]\u001b[A\n",
      " 73%|███████▎  | 14601/20000 [06:31<02:28, 36.45it/s]\u001b[A\n",
      " 73%|███████▎  | 14653/20000 [06:32<02:19, 38.39it/s]\u001b[A\n",
      " 74%|███████▎  | 14706/20000 [06:34<02:22, 37.23it/s]\u001b[A\n",
      " 74%|███████▍  | 14758/20000 [06:35<02:21, 37.02it/s]\u001b[A\n",
      " 74%|███████▍  | 14810/20000 [06:36<02:14, 38.47it/s]\u001b[A\n",
      " 74%|███████▍  | 14863/20000 [06:38<02:12, 38.84it/s]\u001b[A\n",
      " 75%|███████▍  | 14915/20000 [06:39<02:09, 39.38it/s]\u001b[A\n",
      " 75%|███████▍  | 14967/20000 [06:41<02:14, 37.36it/s]\u001b[A\n",
      " 75%|███████▌  | 15020/20000 [06:42<02:11, 38.01it/s]\u001b[A\n",
      " 75%|███████▌  | 15072/20000 [06:43<02:09, 38.07it/s]\u001b[A\n",
      " 76%|███████▌  | 15124/20000 [06:44<02:02, 39.67it/s]\u001b[A\n",
      " 76%|███████▌  | 15177/20000 [06:46<01:57, 40.98it/s]\u001b[A\n",
      " 76%|███████▌  | 15229/20000 [06:47<02:02, 39.01it/s]\u001b[A\n",
      " 76%|███████▋  | 15281/20000 [06:48<02:00, 39.20it/s]\u001b[A\n",
      " 77%|███████▋  | 15334/20000 [06:50<01:59, 39.06it/s]\u001b[A\n",
      " 77%|███████▋  | 15386/20000 [06:51<01:58, 38.85it/s]\u001b[A\n",
      " 77%|███████▋  | 15438/20000 [06:53<01:58, 38.45it/s]\u001b[A\n",
      " 77%|███████▋  | 15491/20000 [06:54<02:00, 37.39it/s]\u001b[A\n",
      " 78%|███████▊  | 15543/20000 [06:55<01:55, 38.74it/s]\u001b[A\n",
      " 78%|███████▊  | 15595/20000 [06:56<01:49, 40.27it/s]\u001b[A\n",
      " 78%|███████▊  | 15648/20000 [06:58<01:47, 40.33it/s]\u001b[A\n",
      " 78%|███████▊  | 15700/20000 [06:59<01:45, 40.67it/s]\u001b[A\n",
      " 79%|███████▉  | 15752/20000 [07:00<01:45, 40.09it/s]\u001b[A\n",
      " 79%|███████▉  | 15805/20000 [07:01<01:41, 41.50it/s]\u001b[A\n",
      " 79%|███████▉  | 15857/20000 [07:03<01:48, 38.10it/s]\u001b[A\n",
      " 80%|███████▉  | 15909/20000 [07:05<01:48, 37.65it/s]\u001b[A\n",
      " 80%|███████▉  | 15962/20000 [07:06<01:53, 35.70it/s]\u001b[A\n",
      " 80%|████████  | 16014/20000 [07:08<01:53, 35.26it/s]\u001b[A\n",
      " 80%|████████  | 16066/20000 [07:10<01:58, 33.08it/s]\u001b[A\n",
      " 81%|████████  | 16119/20000 [07:12<02:15, 28.70it/s]\u001b[A\n",
      " 81%|████████  | 16171/20000 [07:14<02:13, 28.62it/s]\u001b[A\n",
      " 81%|████████  | 16223/20000 [07:15<02:02, 30.93it/s]\u001b[A\n",
      " 81%|████████▏ | 16276/20000 [07:16<01:51, 33.32it/s]\u001b[A\n",
      " 82%|████████▏ | 16328/20000 [07:18<01:45, 34.90it/s]\u001b[A\n",
      " 82%|████████▏ | 16380/20000 [07:19<01:42, 35.24it/s]\u001b[A\n",
      " 82%|████████▏ | 16433/20000 [07:21<01:47, 33.12it/s]\u001b[A\n",
      " 82%|████████▏ | 16485/20000 [07:24<02:05, 28.10it/s]\u001b[A\n",
      " 83%|████████▎ | 16537/20000 [07:26<02:05, 27.57it/s]\u001b[A\n",
      " 83%|████████▎ | 16590/20000 [07:27<01:57, 28.97it/s]\u001b[A\n",
      " 83%|████████▎ | 16642/20000 [07:28<01:43, 32.47it/s]\u001b[A\n",
      " 83%|████████▎ | 16694/20000 [07:30<01:39, 33.34it/s]\u001b[A\n",
      " 84%|████████▎ | 16747/20000 [07:31<01:34, 34.43it/s]\u001b[A\n",
      " 84%|████████▍ | 16799/20000 [07:32<01:29, 35.58it/s]\u001b[A\n",
      " 84%|████████▍ | 16851/20000 [07:34<01:27, 35.95it/s]\u001b[A\n",
      " 85%|████████▍ | 16904/20000 [07:36<01:28, 35.02it/s]\u001b[A\n",
      " 85%|████████▍ | 16956/20000 [07:38<01:36, 31.40it/s]\u001b[A\n",
      " 85%|████████▌ | 17008/20000 [07:39<01:38, 30.23it/s]\u001b[A\n",
      " 85%|████████▌ | 17061/20000 [07:41<01:35, 30.94it/s]\u001b[A\n",
      " 86%|████████▌ | 17113/20000 [07:42<01:27, 32.99it/s]\u001b[A\n",
      " 86%|████████▌ | 17165/20000 [07:44<01:21, 34.77it/s]\u001b[A\n",
      " 86%|████████▌ | 17218/20000 [07:45<01:15, 36.91it/s]\u001b[A\n",
      " 86%|████████▋ | 17270/20000 [07:46<01:11, 37.99it/s]\u001b[A\n",
      " 87%|████████▋ | 17322/20000 [07:48<01:09, 38.54it/s]\u001b[A\n",
      " 87%|████████▋ | 17375/20000 [07:49<01:06, 39.42it/s]\u001b[A\n",
      " 87%|████████▋ | 17427/20000 [07:50<01:04, 40.20it/s]\u001b[A\n",
      " 87%|████████▋ | 17479/20000 [07:51<01:02, 40.38it/s]\u001b[A\n",
      " 88%|████████▊ | 17532/20000 [07:53<01:01, 40.23it/s]\u001b[A\n",
      " 88%|████████▊ | 17584/20000 [07:54<01:00, 40.10it/s]\u001b[A\n",
      " 88%|████████▊ | 17636/20000 [07:55<00:56, 41.64it/s]\u001b[A\n",
      " 88%|████████▊ | 17689/20000 [07:56<00:54, 42.54it/s]\u001b[A\n",
      " 89%|████████▊ | 17741/20000 [07:58<00:54, 41.68it/s]\u001b[A\n",
      " 89%|████████▉ | 17793/20000 [07:59<00:53, 41.38it/s]\u001b[A\n",
      " 89%|████████▉ | 17846/20000 [08:00<00:52, 40.82it/s]\u001b[A\n",
      " 89%|████████▉ | 17898/20000 [08:02<00:57, 36.75it/s]\u001b[A\n",
      " 90%|████████▉ | 17950/20000 [08:03<00:54, 37.80it/s]\u001b[A\n",
      " 90%|█████████ | 18003/20000 [08:05<00:56, 35.08it/s]\u001b[A\n",
      " 90%|█████████ | 18055/20000 [08:07<00:56, 34.38it/s]\u001b[A\n",
      " 91%|█████████ | 18107/20000 [08:09<01:02, 30.47it/s]\u001b[A\n",
      " 91%|█████████ | 18160/20000 [08:12<01:12, 25.44it/s]\u001b[A\n",
      " 91%|█████████ | 18212/20000 [08:13<01:03, 28.03it/s]\u001b[A\n",
      " 91%|█████████▏| 18264/20000 [08:14<00:57, 30.07it/s]\u001b[A\n",
      " 92%|█████████▏| 18317/20000 [08:16<00:50, 33.27it/s]\u001b[A\n",
      " 92%|█████████▏| 18369/20000 [08:17<00:46, 35.27it/s]\u001b[A\n",
      " 92%|█████████▏| 18421/20000 [08:18<00:45, 35.09it/s]\u001b[A\n",
      " 92%|█████████▏| 18474/20000 [08:20<00:41, 36.41it/s]\u001b[A\n",
      " 93%|█████████▎| 18526/20000 [08:21<00:38, 38.02it/s]\u001b[A\n",
      " 93%|█████████▎| 18578/20000 [08:23<00:39, 36.00it/s]\u001b[A\n",
      " 93%|█████████▎| 18631/20000 [08:24<00:35, 38.15it/s]\u001b[A\n",
      " 93%|█████████▎| 18683/20000 [08:25<00:33, 39.34it/s]\u001b[A\n",
      " 94%|█████████▎| 18735/20000 [08:26<00:32, 39.24it/s]\u001b[A\n",
      " 94%|█████████▍| 18788/20000 [08:28<00:31, 39.05it/s]\u001b[A\n",
      " 94%|█████████▍| 18840/20000 [08:29<00:29, 39.72it/s]\u001b[A\n",
      " 94%|█████████▍| 18892/20000 [08:30<00:27, 40.44it/s]\u001b[A\n",
      " 95%|█████████▍| 18945/20000 [08:31<00:25, 41.38it/s]\u001b[A\n",
      " 95%|█████████▍| 18997/20000 [08:33<00:24, 41.46it/s]\u001b[A\n",
      " 95%|█████████▌| 19049/20000 [08:34<00:22, 41.72it/s]\u001b[A\n",
      " 96%|█████████▌| 19102/20000 [08:35<00:21, 41.98it/s]\u001b[A\n",
      " 96%|█████████▌| 19154/20000 [08:37<00:22, 37.97it/s]\u001b[A\n",
      " 96%|█████████▌| 19206/20000 [08:38<00:20, 38.70it/s]\u001b[A\n",
      " 96%|█████████▋| 19259/20000 [08:39<00:18, 39.26it/s]\u001b[A\n",
      " 97%|█████████▋| 19311/20000 [08:42<00:20, 32.84it/s]\u001b[A\n",
      " 97%|█████████▋| 19363/20000 [08:43<00:18, 34.17it/s]\u001b[A\n",
      " 97%|█████████▋| 19416/20000 [08:44<00:16, 35.91it/s]\u001b[A\n",
      " 97%|█████████▋| 19468/20000 [08:49<00:24, 21.52it/s]\u001b[A\n",
      " 98%|█████████▊| 19520/20000 [08:51<00:20, 23.77it/s]\u001b[A\n",
      " 98%|█████████▊| 19573/20000 [08:52<00:15, 27.67it/s]\u001b[A\n",
      " 98%|█████████▊| 19625/20000 [08:53<00:12, 29.45it/s]\u001b[A\n",
      " 98%|█████████▊| 19677/20000 [08:55<00:10, 31.78it/s]\u001b[A\n",
      " 99%|█████████▊| 19730/20000 [08:56<00:08, 31.88it/s]\u001b[A\n",
      " 99%|█████████▉| 19782/20000 [08:59<00:07, 27.28it/s]\u001b[A\n",
      " 99%|█████████▉| 19834/20000 [09:02<00:07, 23.47it/s]\u001b[A\n",
      " 99%|█████████▉| 19887/20000 [09:05<00:05, 21.81it/s]\u001b[A\n",
      "100%|█████████▉| 19939/20000 [09:06<00:02, 25.07it/s]\u001b[A\n",
      "100%|█████████▉| 19991/20000 [09:07<00:00, 28.22it/s]\u001b[A\n",
      "20044it [09:08, 31.59it/s]                           \u001b[A\n",
      "\u001b[A"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GANbalancer(auxiliary=False, batch_size=64, categorical=None,\n",
       "      critic_iterations=3, critic_layers=[50, 50],\n",
       "      gan_architecture='fisher', generator_input=4, generator_layers=[50],\n",
       "      idx_cont=range(0, 2), layer_norm=True, learning_rate=[5e-05, 5e-05],\n",
       "      n_iter=20000, random_state=None, sampling_strategy={0: 10000, 1: 0},\n",
       "      training_gif=True, verbose=2)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gan_balancer._update(X=data[data_idx][0], y=np.zeros(shape=N_SAMPLES), n_iter=20000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "gan_balancer.trainer.save_training_gif(\"~/Downloads/simulation_2clusterGaussian_training_fisher-n_iter_60k.gif\", step=3, loop=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/hauptjoh/anaconda/envs/deeplearning/lib/python3.6/site-packages/matplotlib/figure.py:445: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  % get_backend())\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "real_data = data[data_idx][0][np.random.choice(N_SAMPLES, size=1000, replace=False), :] \n",
    "no_vars = real_data.shape[1]\n",
    "combinations = [(x, y) for x in range(no_vars) for y in range(no_vars) if y > x]\n",
    "fig, axes = plt.subplots(nrows=no_vars-1, ncols=no_vars-1, squeeze=False,\n",
    "                         figsize=(10, 10))\n",
    "\n",
    "for i, j in combinations:\n",
    "    axes[(i, j-1)].scatter(*real_data[:, (i, j)].transpose()) #, rasterized=True\n",
    "    axes[(i, j-1)].grid()\n",
    "\n",
    "fig.suptitle(f\"Real distribution\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data[data_idx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = gan_balancer.trainer.plot_training()\n",
    "fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "check_first_moments([data[data_idx][0], \n",
    "                     gan_balancer.generator.sample_data(N_SAMPLES),\n",
    "                     smote._sample(data[data_idx][0], y=np.zeros(shape=N_SAMPLES))[0]\n",
    "                    ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Covariance matrix extimate is very close to true covariance matrix, e.g. \n",
    "TRUE  ([[ 0.21, -0.11, -0.11, -0.14,  0.1 ],\n",
    "        [-0.11,  0.32,  0.08,  0.07, -0.23],\n",
    "        [-0.11,  0.08,  0.13,  0.11, -0.08],\n",
    "        [-0.14,  0.07,  0.11,  0.21, -0.07],\n",
    "        [ 0.1 , -0.23, -0.08, -0.07,  0.24]]),\n",
    "        \n",
    " GAN  ([[ 0.21, -0.09, -0.12, -0.17,  0.11],\n",
    "        [-0.09,  0.23,  0.07,  0.07, -0.14],\n",
    "        [-0.12,  0.07,  0.13,  0.13, -0.06],\n",
    "        [-0.17,  0.07,  0.13,  0.21, -0.06],\n",
    "        [ 0.11, -0.14, -0.06, -0.06,  0.2 ]]),\n",
    "        \n",
    "SMOTE ([[ 0.21, -0.11, -0.11, -0.14,  0.1 ],\n",
    "        [-0.11,  0.32,  0.08,  0.07, -0.23],\n",
    "        [-0.11,  0.08,  0.13,  0.11, -0.08],\n",
    "        [-0.14,  0.07,  0.11,  0.21, -0.07],\n",
    "        [ 0.1 , -0.23, -0.08, -0.07,  0.23]])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "check_second_moments([data[data_idx][0], \n",
    "                     gan_balancer.generator.sample_data(N_SAMPLES),\n",
    "                     smote._sample(data[data_idx][0], y=np.zeros(shape=N_SAMPLES))[0]\n",
    "                    ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Critic data cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the critic to select samples that are more realistic from a larger set of generated observations. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample = gan_balancer.generator(gan_balancer.generator.sample_latent(N_SAMPLES*20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "idx_critic = np.argsort(\n",
    "    gan_balancer.critic(sample).detach().numpy().flatten()\n",
    "                         )\n",
    "idx_lowest = idx_critic[:N_SAMPLES].copy()\n",
    "idx_highest = idx_critic[-N_SAMPLES:].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "idx_lowest"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Critic output is in the range $[-\\inf;0]$ where higher is less difference to the real distribution. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_np = sample.detach().numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_lowest = sample_np[idx_lowest,:].copy()\n",
    "sample_random = sample_np[np.random.choice(range(0,N_SAMPLES), size=N_SAMPLES),:].copy()\n",
    "sample_highest = sample_np[idx_highest,:].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "check_first_moments([data[\"Independent\"][0], \n",
    "                     sample_highest,\n",
    "                     sample_np,\n",
    "                     sample_lowest\n",
    "                    ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "check_second_moments([data[\"Independent\"][0], \n",
    "                     sample_highest,\n",
    "                     sample_np,\n",
    "                     sample_lowest\n",
    "                    ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visual test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "combinations = [(x,y) for x in range(no_vars) for y in range(no_vars) if y>x]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, axes = plt.subplots(nrows=no_vars, ncols=no_vars, sharex=True, sharey=True, squeeze=True,figsize=(10,10))\n",
    "for y in axes:\n",
    "    for x in y:\n",
    "        x.set_xticklabels([])\n",
    "        x.set_yticklabels([])\n",
    "\n",
    "for i,j in combinations:\n",
    "    sns.kdeplot(X_majority[:,i], X_majority[:,j], alpha=0.5, cmap=\"Blues\", ax=axes[(j,i)])\n",
    "    sns.kdeplot(X_minority[:,i], X_minority[:,j], alpha=0.5, cmap=\"Greens\", ax=axes[(j,i)])\n",
    "fig.savefig(f'../img/cont_sample_tr_iter_{trainer.G.training_iterations}.png',format='png', dpi=100)\n",
    "    #fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "epochs = 90\n",
    "\n",
    "for _ in range(30):\n",
    "    trainer.train(data_loader, epochs)\n",
    "    \n",
    "    \n",
    "    if modus == 'full':\n",
    "        fake_minority = generator(*generator.sample_latent(num_samples= 1000, class_index=1)).data.numpy()\n",
    "        fake_majority = generator(*generator.sample_latent(num_samples= 1000, class_index=0)).data.numpy()\n",
    "    elif modus == 'minority':\n",
    "        fake_minority = generator(generator.sample_latent(num_samples= 1000)).data.numpy()\n",
    "        \n",
    "    fig, axes = plt.subplots(nrows=no_vars, ncols=no_vars, sharex=True, squeeze=True,figsize=(10,10))\n",
    "    for y in axes:\n",
    "        for x in y:\n",
    "            x.set_xticklabels([])\n",
    "            x.set_yticklabels([])\n",
    "    \n",
    "    for i in range(no_vars):\n",
    "        sns.kdeplot(X_minority[:,i], alpha=0.5, shade=True, color=\"blue\", ax=axes[(i,i)])\n",
    "        sns.kdeplot(fake_minority[:,i], alpha=0.5, shade=True, color=\"green\", ax=axes[(i,i)])\n",
    "    \n",
    "    for i,j in combinations:\n",
    "        axes[(i,j)].set_ylim(0,1)\n",
    "        # majority (upper right)\n",
    "        if modus == 'full':\n",
    "            sns.kdeplot(X_majority[0:1000,i], X_majority[0:1000,j], alpha=0.5, cmap=\"Blues\", ax=axes[(i,j)])\n",
    "            sns.kdeplot(fake_majority[:,i], fake_majority[:,j], alpha=0.5, cmap=\"Greens\", ax=axes[(i,j)], )\n",
    "        \n",
    "        # minority (lower left)\n",
    "        sns.kdeplot(X_minority[:,i], X_minority[:,j], alpha=0.5, cmap=\"Blues\", ax=axes[(j,i)])\n",
    "        sns.kdeplot(fake_minority[:,i], fake_minority[:,j], alpha=0.5, cmap=\"Greens\", ax=axes[(j,i)])\n",
    "        \n",
    "    fig.savefig(f'../img/cont_sample_tr_iter_{trainer.G.training_iterations}.png',format='png', dpi=200)\n",
    "        #fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "desc = f\"multinormal_n{N//1000}_k{no_vars}_{modus}\"\n",
    "torch.save(generator.state_dict(), f\"../models/wgan_generator_{desc}_{generator.training_iterations}\")\n",
    "torch.save(discriminator.state_dict(), f\"../models/wgan_discriminator_{desc}_{generator.training_iterations}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "file_name = \"multinormal_n10_k4_c2_6999\"\n",
    "generator.load_state_dict(torch.load(f\"../models/wgan_generator_{file_name}\"))\n",
    "discriminator.load_state_dict(torch.load(f\"../models/wgan_discriminator_{file_name}\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Distribution summary statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from torch import Tensor as T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fake_minority = generator(*generator.sample_latent(num_samples= minority_samples, class_index=1)).data.numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(np.mean(X_minority, axis=0))\n",
    "print(np.mean(fake_minority, axis=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(np.quantile(X_minority, q=np.arange(0,1,0.1), axis=0))\n",
    "print(np.quantile(fake_minority, q=np.arange(0,1,0.1), axis=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(np.cov(X_minority, rowvar=False) - np.cov(fake_minority,rowvar=False))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Discriminator test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_size = X_minority.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fake = generator(*generator.sample_latent(num_samples= sample_size, class_index=1)).data.numpy()\n",
    "#fake = generator(generator.sample_latent(num_samples= sample_size)).data.numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_fakereal = np.vstack([X_minority, \n",
    "                        fake])\n",
    "y_fakereal = np.concatenate([np.zeros(X_minority.shape[0]), \n",
    "                        np.ones(fake.shape[0])]).flatten()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = RandomForestClassifier(n_estimators=50, min_samples_leaf=20, n_jobs=10)\n",
    "model_fakereal = clf.fit(X_fakereal, y_fakereal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_fakereal = model_fakereal.predict_proba(X_fakereal)[:,1]\n",
    "roc_auc_score(y_fakereal, pred_fakereal)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predictive performance testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train_bin = np.argmax(y_train, axis=1)\n",
    "y_test_bin = np.argmax(y_test, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_auc(model_library, X, y_true):\n",
    "    auc = {}\n",
    "    for model in model_library.keys():\n",
    "        pred = model_library[model].predict_proba(X_test)[:,1]\n",
    "        auc[model] = roc_auc_score(y_true, pred)\n",
    "    return auc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predictive test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "minority_samples = X_minority.shape[0]\n",
    "majority_samples = X_majority.shape[0]\n",
    "\n",
    "fake_minority = generator(*generator.sample_latent(num_samples= minority_samples, class_index=1)).data.numpy()\n",
    "fake_majority = generator(*generator.sample_latent(num_samples= majority_samples, class_index=0)).data.numpy()\n",
    "\n",
    "X_synthetic = np.vstack([fake_majority, \n",
    "                         fake_minority])\n",
    "y_synthetic = np.concatenate([np.zeros(majority_samples), \n",
    "                              np.ones(minority_samples)]).flatten()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf_org = DecisionTreeClassifier(max_depth=10) #LogisticRegression(solver='saga') \n",
    "clf_fake = DecisionTreeClassifier(max_depth=10) #LogisticRegression(solver='saga')\n",
    "\n",
    "predictive = {}\n",
    "predictive[\"real\"] = clf_org.fit(X=X_train, y=y_train_bin)\n",
    "predictive[\"synthetic\"] = clf_fake.fit(X=X_synthetic, y=y_synthetic)\n",
    "\n",
    "test_auc(predictive, X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Upsampling performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "performance = {\"original\":[],\"GANbalanced\":[]}\n",
    "for i in range(200):\n",
    "    sample_size = X_minority.shape[0]*4\n",
    "    X_fake = generator(*generator.sample_latent(num_samples= sample_size, class_index=1)).data.numpy()\n",
    "    #X_fake = generator(generator.sample_latent(num_samples= sample_size, class_index=None)).data.numpy()\n",
    "    y_fake = np.ones(shape=[sample_size])\n",
    "\n",
    "    X_up = np.vstack([X_train,X_fake])\n",
    "    y_up = np.hstack([y_train_bin,y_fake])\n",
    "\n",
    "    clf_org = DecisionTreeClassifier(max_depth=5)\n",
    "    clf_fake = DecisionTreeClassifier(max_depth=5)\n",
    "\n",
    "    upsampling = {}\n",
    "    upsampling[\"original\"] =  clf_org.fit(X=X_train, y=y_train_bin)\n",
    "    upsampling[\"GANbalanced\"] = clf_fake.fit(X=X_up, y=y_up)\n",
    "    \n",
    "    performance_temp = test_auc(upsampling, X_test, y_test_bin)\n",
    "    for model in performance_temp:\n",
    "        performance[model].append(performance_temp[model])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(pd.DataFrame(performance).mean())\n",
    "print(pd.DataFrame(performance).std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_decision_function(X, y, clf, ax):\n",
    "    plot_step = 0.02\n",
    "    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n",
    "    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n",
    "    xx, yy = np.meshgrid(np.arange(x_min, x_max, plot_step),\n",
    "                         np.arange(y_min, y_max, plot_step))\n",
    "\n",
    "    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])\n",
    "    Z = Z.reshape(xx.shape)\n",
    "    ax.contourf(xx, yy, Z, alpha=0.4)\n",
    "    ax.scatter(X[:, 0], X[:, 1], alpha=0.8, c=y, edgecolor='k')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7))\n",
    "plot_decision_function(X_train, y_train, upsampling[\"original\"], ax1)\n",
    "plot_decision_function(X_up, y_up, upsampling[\"GANbalanced\"], ax2)\n",
    "\n",
    "fig.tight_layout()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [deeplearning]",
   "language": "python",
   "name": "Python [deeplearning]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
